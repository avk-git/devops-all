https://www.youtube.com/watch?v=11z2x3VYO_I


CentOS 7/8


Jenkins 
	integrating with git + github webhooks
		 
	integrating with maven
	integrating with jira
	integrating with SonarCube
	multi-branching strategy
	Success 
		here
	Failure
		here
	Test fails
		what should be other approach.
		

8 hours
	2/3
	
	
	Maven
		Packaging
		Add package
		Remove package
		
	
	Jenkins, Maven, Github,
	
	Git is already done.
	
- Review of the CentOS instance that all engineers have.

Jenkins basics
	Introduction to Jenkins
	Installing Jenkins
---------------------------------------------------------------------------------
https://www.jenkins.io/doc/book/installing/
	Look for CentOS section
	
	
	sudo su
	yum install wget -y
	sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo	
	sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
	sudo yum upgrade -y
	sudo yum install jenkins java-1.8.0-openjdk-devel -y


	Access using http://ip:8080/
	
	In centos jenkins.war can be found mostly at
	/usr/lib/jenkins/
	If not found check 
	systemctl status jenkins


or


https://pkg.jenkins.io/redhat/

sudo yum update

java -version
sudo yum install java-1.8.0
sudo /usr/sbin/alternatives --config java

Step 1 : Connect to your Linux machine
SetUp JAVA PATH
Set up Custom TCP port: 8080 in AWS Security Groups

Step 2: Update Packages
   sudo yum update

Step 3 : Check Java is installed. If not install java  
   java -version
   sudo yum install java-1.8.0

   To check and select one out of multiple java versions available
   sudo /usr/sbin/alternatives --config java

Step 4 : Download latest Jenkins code package
	sudo yum install wget #if wget is not present.
   sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo


Step 5 : Import a key file from Jenkins-CI to enable installation from the package
   sudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key


Step 6 : Install Jenkins
   sudo yum install jenkins

Step 7 : Start jenkins
   sudo service jenkins start

Step 8 : Access Jenkins server using the public DNS of your ec2 on port 8080
   http://{ec2-public-dns}:8080
   example : http://3.89.79.74:8080/


Useful tips

To start jenkins on a diff port
Update port number in /etc/sysconfig/jenkins


To fetch initial admin password
 sudo su -
 cd /var/lib/jenkins/secrets/
 cat initialAdminPassword
0bcbbcab7f984af7b4171b55e9201d04
To stop Jenkins
 sudo service jenkins stop

To uninstall Jenkins
 sudo service jenkins stop
 sudo yum remove jenkins
 sudo rm -r /var/lib/jenkins
 
Start jenkins on a different port
 java -jar jenkins.war -httpPort=9090

###################################################################################################

If you are on windows or Mac and want to install jenkins.
	1. Download and install java.
		Download the installable and execute it.
		Ensure the path is set.
	2. Download jenkins war file
	3. Move the war file to a location you like (optional)
	4. On the command prompt or terminal
		cd <folder where jenkins.war is present>
		java -jar jenkins.war

###################################################################################################
	
	Introdution Jenkins UI
	
###################################################################################################
	
	The most popular open source tool
	Perform continuous integration and build automation. 
	Execute a predefined list of steps, 
		e.g. to compile Java source code and build a JAR from the resulting classes. 
	Can execute time or event based.
	
	Exmaples of what Jenkins can do:
		perform a software build using a build system like Apache Maven or Gradle
		execute a shell script
		archive a build result
		run software tests


	Monitors the execution of the steps 
	Allows to stop the process, if one of the steps fails. 
	Can send emails in case of a build success or failure.
	
	
	
###################################################################################################
	
	Master-Slave Architecture 
	
	Jenkins can be executed in Master Slave Mode.


	Multiple environments can be used to improve performance.
	
	Jenkins Master
		Scheduling build jobs.
		Dispatching builds to the slaves for the actual execution.
		Monitor the slaves (possibly taking them online and offline as required).
		Recording and presenting the build results.
		Can also execute build jobs directly.
		Admin. configures lot on master
			e.g. Secrets
			
	Jenkins Slave
		It hears requests from the Jenkins Master instance.
		Slaves can be  running on any operating systems.
		Executes the job instructed by master
		
		Can configure a project to always run on a particular Slave machine.
		
	
	
###################################################################################################
###################################################################################################

	Jenkins Jobs
###################################################################################################
###################################################################################################

	Jenkins Views
###################################################################################################
###################################################################################################


	Introduction to Jenkins Pipeline
#####################################################################################################################
https://www.jenkins.io/doc/book/pipeline/getting-started/
Jenkins Pipeline is a suite of plugins that supports implementing and integrating continuous delivery pipelines into Jenkins. Pipeline provides an extensible set of tools for modeling simple-to-complex delivery pipelines "as code" via the Pipeline DSL. [1]	
#####################################################################################################################
	
Git
	Introduction to Git

#####################################################################################################################
	
	Configuring git in jenkins # added latter	
#####################################################################################################################
	
	Create a github account
###################################################################################################

###################################################################################################

	Fork my repository
###################################################################################################

###################################################################################################
	
	Clone the repository to the local machine
#####################################################################################################################

	sudo yum install git -y
	git clone https://github.com/vilasvarghese/springboot
	
	Setup  a job and specify gitHub and git.
	Build in "Execute in Shell"
	echo "Hello World!!"
	Save and trigger the job
	
	Go to 
	/var/lib/jenkins/workspace/<<job name>>
	Folder should appear.
#####################################################################################################################
	
	Update the repo locally and check in back to your own repo.
	Setup a jenkins job to download git code
	Trigger the above job.
	Setup git hub with webhook to automatically download the git code
#####################################################################################################################
	Setup on jenkins for github and enable github hook.
	
	
	In jenkins rep - settings - webhooks 
	Click "Add webhook"
	Update payload url as 
		http://<public ip>:8080/github-webhook/	#github-webhook/ is mandatory.`
		ContentType: application/json
		Click "Add Webhook"
		
	Make some changes and check in.
	
#####################################################################################################################

	
Maven
	Introduction to Maven
	Installing Maven
#####################################################################################################################

Step 1
	cd /opt
	sudo yum install wget
	sudo wget http://www-us.apache.org/dist/maven/mave-3/3.5.3/binaries/apache-maven-3.5.3-bin.zip

Step
	Add the following content into ~/.bashrc
	vi ~/bashrc
	
	export M2_HOME=/home/<user>/apache-maven-3.5.3
	export M2=@M2_HOME/bin
	export PATH=$M2:$PATH
	
Step3
	Verify installation
	

Apache Maven is a free and open-source project management and comprehension tool used primarily for Java projects. Maven uses a Project Object Model (POM), which is essentially an XML file containing information about the project, configuration details, the projectâ€™s dependencies, and so on.



The official CentOS repositories contain Maven packages that can be installed with the yum package manager. 
This is the easiest way to install Maven on CentOS. 
For this use Strategy 1

However, the version included in the repositories may lag behind the latest version of Maven.

For this use Strategy 2

Prerequisites 
	User should have sudo privileges.
	
	sudo yum install maven
#####################################################################################################################
	
	Overview of POM.xml
	Build a java project using pom.xml
	Update the jenkins job to build the code using maven
	
SonarQube
	Introduction to SonarQube
	Install SonarQube
######################################################################################################################

MySQL DB instance using RDS
---------------------------
Create a Mysql DB instance in AWS with default settings

DB   - sonardb
User/Password  - sonardbadmin/Sonar123


Create an AWS ECS instance (Atleast t2.small instance as sonarqube require 1 GB free memory )
login to the machine as ec2-user

Install Java and Mysql client
-----------------------------

sudo su -
sudo yum install mysql java-1.8* -y   //Community Edition
sudo amazon-linux-extras install java-openjdk11 //Dev edition 


Sonarqube Installation
----------------------
CD to /opt 
#wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-7.6.zip
#unzip sonarqube-7.6.zip
#mv sonarqube-7.6  sonarqube


#useradd sonaradmin
#passwd  sonaradmin
Sonar@admin123

Give the sonaradmin user the permission to run the sonarqube 
#chown -R sonaradmin:sonaradmin sonarqube

#mysql -h <AWS RDS instance service name> -u sonardbadmin -p
Password: Sonar123

MySQL>create database sonar CHARACTER SET utf8 COLLATE utf8_general_ci;

Create a local and remote user for sonarqube

MySQL> create user sonar@localhost identified by 'sonar';

MySQL > create user sonar@'%' identified by 'sonar';


Grant database access permission to sonar user

MySQL > grant all on sonar.* to sonar@localhost;

MySQL > grant all on sonar.* to sonar@'%';


Check whether the users and database created 

MySQL>use mysql
MySQL>show databases;
MySQL>select user from mysql.user;      
Make sure a user with name 'sonar' exists.

MySQL>FLUSH PRIVILEGES;
MySQL>QUIT

Configure Sonarqube to use the RDS instance
-------------------------------------------
#cd /opt/sonarqube/conf/
Update the DB details in sonar.properties file

Uncomment the below entries and input the DB details 

sonar.jdbc.username=sonardbadmin
sonar.jdbc.password=Sonar123
sonar.jdbc.url=<Replace the localhost with RDS DB instance name>  

sonar.web.context=/sonar


#>su - sonaradmin
sonaradmin@..>cd /opt/sonarqube/bin/linux-x86-64/
sonaradmin@..>./sonar.sh start
sonaradmin@..>./sonar.sh status


Register SonarQube at boot time (RedHat, CentOS, 64 bit):
sudo ln -s $SONAR_HOME/bin/linux-x86-64/sonar.sh /usr/bin/sonar
sudo chmod 755 /etc/init.d/sonar
sudo chkconfig --add sonar


Configure Reverse Proxy to route the request through 80



[root@ip-1...]# yum install epel-release
[root@ip-1...]# yum install nginx
[root@ip-1...]# sudo amazon-linux-extras install nginx1.12



Update the config file to proxy the connection to port 9000 to 80.


[root@ip-1...]# vi /etc/nginx/nginx.conf

# the server directive is nginx's virtual host directive
server {
  # port to listen on. Can also be set to an IP:PORT
  listen 80;
 
  # sets the domain[s] that this vhost server requests for
  server_name www.somecompany.com;   //Only if domain exists.
 
  location / {
    proxy_pass http://sonarhost:sonarport;
  }
}


[root@ip-linux-x86-64]# systemctl start nginx
[root@ip-linux-x86-64]# systemctl enable nginx

--------------------------------------------------

Installation on local machine.

http://lampblogs.com/blog/how-to-install-sonarqube-on-centos-7
/var/lib/jenkins/workspace/JenkinsPipeline1@2/target/HelloWorld-1.0.1.war

https://docs.sonarqube.org/latest/setup/troubleshooting/
2c6b10bcc5f5eb7af2ceba1d05cf8d8fff49e8c0
mvn sonar:sonar \
  -Dsonar.host.url=http://192.168.56.132:9000 \
  -Dsonar.login=2c6b10bcc5f5eb7af2ceba1d05cf8d8fff49e8c0
  
 https://github.com/nevin-cleetus/sonarqube/blob/master/Sonarqube%20Jenkins%20Integration 
 https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-jenkins/
 
 
 Troubleshooting:

1.  
 Logs can be present in 
 <sonarqube home>/logs
 generally
	/opt/sonar/logs

web.log should have most 
2. 
Ensure to update the jdbc connection string with your username
	sonar is the default in above url, it should sonar_db


######################################################################################################################
	
	Continuous Code Inspection
	
	
	
	Software Quality Metrices
	Update the jenkins job to execute static code analysis using SonarQube
######################################################################################################################
	SonarQube
		Open source project for continous inspection of code quality
		Written in Java
		Can be used for various languages
		
		Can find
			Duplicate code
			Unit testing coverage
			% unit test failure/success
			Code coverage
			
		
		
		Code quality integration tool
			Code smells
			Bugs
			Vulnerabilities
			
		Track all of results in a common place.
		Can have a profile in sonarqube
		Based on the profile
			Code base can be scanned
			Vulnerabilities identified
			
		Can add more profiles
		Can add different set of rules
			e.g. a rule for java
			another for sql
			
		Recently: released open source version.
		Configure open sourced projects for free.
			sonarcloud.io
			
		Maintains history
			Can compare 
			
		sonar-project.properties
			In the root directory.
			
		Name in Jenkins file and name that you confirgure jenkins prop. should match.
			
			
--------------------------------------------------
Few other properties you can configure in sonar.properties

sonar-project.properties in your project root folder
	Overrides the settings in 
		/opt/sonarqube/conf/sonar.properties

	For the mandatory settings from 
		https://github.com/vilasvarghese/hello/sonar-project.properties

sonar.host.url=	http://localhost:9000
#PostgreSQL
sonar.jdbc.url=jdbc: postgresql://localhost/sonar
#Oracle
sonar.jdbc.url
######################################################################################################################
		
	
	
	
End to End 1
	Make a change in local repo. and push it into github.
	Using webhook automatically trigger
		download of the code
		run static analysis
		build using maven
		
Jenkins Continued...
	Introduction to Multi-branching
	Setup Jenkins for multi-branching
	Define a multi-branched job targetting to the same git repo.
	Make a change and merge it into git repo.
	Using webhook trigger the branch for download, build and test.
	
	
	



#########################################################################################################


Jenkins
	popular automation tool for CI/CD
		Bamboo
		Circle CI
		Solano CI
		Team City
		
	Automate any task
	Open source
	Written in java
	Collection of plugins
	Can deploy in existing server
	

Jenkins Install and Configure
	Install and configure
	https://jenkins.io/download
	Click Download
	Under "Long term Support"
	
	Click ".... CentOS"
	Instructions are present there.
	
	
############################################################################################################

Jenkins
-------
4. Jenkins from CLI
	Start jenkins
		- Manage jenkins
		- Configure global security
		- Enable security (check)
			- Apply and save
		- go to http://ip:port/cli
		- Download jenkins-cli.jar 
		- move it to your convenient location
		- On terminal/cmd go to the location where the jenkins-cli.jar is present.
			- cd to the location
		- Copy the command from cli page and paste it on the terminal
			- should be like java -jar jenkins-cli.jar -s http://localhost:8080/ help
			- You may be prompted for password.
				- Go to user's configure
					- In browser jenkins url click on your name drop down and go to configure
					- Add passphrase
		
		Try this before explaining
		


5. Create Users, control and manage users.

	a. Create a new user.
		Click Manage Jenkins
		Click Configure System
		Home can be seen here
		
		Click Manage Jenkins
		
			
	b. Configure users
		Install Role Strategy plugins
		Download and save plugins into 
			<Jenkins home>/plugins and restart
		Go to plugins and install from there.

		Click Manage Jenkins
		Configure Global Security
		Enable Security 
		Authorization
			Check role-based strategy (available only after the above plugin is installed)
		Apply and save.
		
		
		3 roles 
			Global roles
				Can define roles at global (master/slave + projects)
			Project roles
				Can define roles at project level
			Slave roles
													c. Create new roles
	d. Assign roles to users
	e. Control user access on projects


6. Basic configurations in Jenkins
	
		Manage Jenkins
		Configure System 
		Understanding basic configurations
		-----------------------------------
		Home directory
			where is the home directory in the system.
				Plugins logs ect would be in this directory
--------------------------------------------------	Advanced missing for me				
			Click Advanced
				Workspace Root directory
					change path
					Click help
				Build Record Root Directory
					Click help
--------------------------------------------------				
			System Message
				Add some text in it.
				Apply
					This would be displayed on the Jenkins Home when a user logs in.
				We can use html tags in this.
				If you can't give html
					Manage Jenkins 
					Configure Global properties
						Check Markup Formatter
			
			# of executors
			
			Labels
				Node configuration
				Manage Jenkins 
				Manage Nodes
				
					Labels and Usage go hand in hand.
					
				New job 
					Configure
					In General section 
					Restrict where this projecct can be run
						can mention a regex.
						try typing after creating some labels from manage jenkins.
						
					Query Period
						Click help
					
					SCM checkout retry count
						How many times should it retry if scm (like git) is down.

				Environment variables 
					define like key and value
					Can be accessed as 
						${key1}
						$key1
						
						
7. Jobs
	Trigger ect. please watch.
	
	

13. Pipeline
	
	What is a Pipe
	What is a Pipeline?
		Multiple sections of pipes
		Each section can have inlet and outlet
	Pipeline in software delivery workflow
		Build
		Deploy
		Test
		Release
	
	Pipeline
		workflow with a group of events or jobs
		Chained and integrated with each other in a sequence.
		Every job in a pipeline has dependency
			on one or more other jobs.


14. Delivery Pipeline
		Search for Delivery Pipeline plugin


Default Plugins in Jenkins
	Folders
	OWASP Markup Formatter
	Build Timeout
	Credentials Binding
	Formatter
	Timestamper
	Workspace Cleanup
	Ant
	Gradle
	Pipeline
	GitHub Branch Source
	Pipeline: GitHub Groovy Libraries
	Pipeline: Stage View
	Git
	Subversion
	SSH Slaves
	Matrix Authorization Strategy
	PAM Authentication
	LDAP
	Email Extension
	Mailer
	
	
	
###################################################################################################################

Jenkins Pipeline

	What is CI/CD
		Continous Integration
		Continous Development
		Continous Deployment
		
	
	What CI/CD is so important?
	
	
	Jenkins Pipeline
	
	Suite of plugins 
	Supports implementing and integrating continuous delivery pipelines into Jenkins.
		Define workflow
	Automated expression of your process for getting software from 
		version control right through to your users and customers.
	
	Provides an extensible set of tools for modeling simple-to-complex delivery pipelines "as code".
	
	Definition of a Jenkins Pipeline is 
		typically written into a text file (called a Jenkinsfile) 
	Generally checked into a projectâ€™s source control repository. 


	Jenkinsfile
		Scripted pipeline.
		
		
	Go to jenkins create a pipeline project and try Hello World.
	
	Scripted 
		First syntax
		Groovy engine
		Write Groovy script as mentioned below 
			No predefined structure 
		Advanced scripting capabilities, high flexibility
		Difficult to start for those who doesn't know groovy
	Write groovy script as follows.	
	node {
		//groovy script
	}
	
	Declarative
		Added recently 
			so that engineers not comfortable with groovy can also use it.
			Pre-defined structure.
		pipeline{
			agent any
			stages {
				stage ("build"){
					steps {
					}
				}
			}
		}
		
		pipeline: must top level
		agent: where to execute
			if any, it can execute any change
		stages: does the work.
			defines one or more "stage"
			no limit to the number of "stage"

				stage ("build"){
					steps {
					}
				}
				stage ("test"){
					steps {
					}
				}
				stage ("deploy"){
					steps {
					}
				}

		stage: 
			Has steps 
			Acutal script which get executed on teh node.
			
			e.g 
				steps{
					sh 'yum install ..'
					sh 'mvn build'
				}
		
		Repo used: https://github.com/vilasvarghese/hello
		Look at Jenkinsfile1
		Set it up and execute
		
		
	post attribute in end of Jenkinsfile
		post{
			always{
				//send an email.
			}
			success{				
			}
			failure{
			}
		}

	Define expression/conditionals for each stage
		Only want run tests for development branch build. Don't want to run tests for feature branch builds.
		
		Define when 
			stage("test"){
				when{
					expression{
						env.BRANCH_NAME == 'dev'
					}
				}
			}


		Other possible values in expression
		a.
					expression{
						env.BRANCH_NAME == 'dev' || BRANCH_NAME == 'master'
					}
		
		b. 	
			Build only if there is a code change.

			Outside pipeline you can define variables like 
			CODE_CHANGES = getGitChanges()
			and use it inside as follows.

			stage("build"){
				when{
					expression{
						env.BRANCH_NAME == 'dev' && CODE_CHANGES == true
					}
				}
			}
					
					
	Environment variables in Jenkins
	---------------------------------
	Jenkins url 
		http://<ip>:<port>/env-vars.html
		
	
	You can also define your own environment variables in a section like below
	
	pipelin{
		environment{
			JAVA_VERSION = '1.8'
		}
		
		stages{
			stage("build"){
				echo "building on java version ${JAVA_VERSION}" 
			}
		}
	}
	
	N.B. : Variables (like JAVA_VERSION can be used in "" only
	If you use it in '', then it would be interpretted as String. This is groovy syntax
	https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-jenkins/
		
		
	Use credentials in Jenkins.
	1. Define Credentials
		Install Credentials binding plugin
		Define your credentials using plugin options like env. variables.
		
		environment{
			JAVA_VERSION = '1.8'
			SERVER_CREDENTIALS = credentials('') #Binds to the env. variables.
		}
		
		stage(){
			step{
				withCredentials([
					usernamePassword(credentials: 'id', usernameVariable:USER, passwordVariable: PWD)
				])
			}
		}
		
		
###################################################################################################################
	
SonarQube lab
1. 
	Install SonarQube as mentioned in the url below
	http://lampblogs.com/blog/how-to-install-sonarqube-on-centos-7
		Changes
			Instead of 
				/opt/sonarqube/bin/linux-x86-64/sonar.sh start
			do
				/opt/sonarqube/bin/linux-x86-64/sonar.sh console - this will show errors if any
		
		Failure erros can be found at 
			/opt/sonar/logs		#Actually it is <sonar home>/logs
		Especially check
			/opt/sonar/logs/web.log 
			
		Ensure to change the user name in sonar.jdbc.url=jdbc:mysql, 
			It should be sonarqube_db and not the default sonar.
	
	Troubleshooting
		

2. 
	Login to sonar
	http://<ip>:9000/
		user/pwd - admin/admin
	
	
		Create a tocken by going into SonarQube server
			e.g. Vilas - 2c6b10bcc5f5eb7af2ceba1d05cf8d8fff49e8c0
			keep a note of the same.
	
3. 		
	Install the Sonar scanar plugin
		Install without restart is good.

	
4. 	
	Configure sonar scanar
	https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-jenkins/
	N.B: The name should be SONAR_SERVER
		because this should match with withSonarQubeEnv('SONAR_SERVER') that we mentioned in Jenkinsfile
	
	Check "Enable injection of SonarQube server configuration as build environment variables"
		This is required for java projects.
	
5. 	
	Create a pipeline.
		Create a pipeline job
		Make no configurations other than pepeline.
		In Pipeline select SCM, point to 
		https://github.com/vilasvarghese/hello.git
		point to the default Jenkinsfile

		
	