DevOps – TOC – 20 Days
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Git – 1.5 days
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Git TOC deprecated.. Further details in github/devops/git/GitTOC.txt

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
o Introduction to Git
	 What is Git?
	 What is version control?
	 About distributed version control

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\PraiseTheLord\HSBGInfotech\Others\vilas\devops\git\GitOneDay_Notes.txt

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	

o Installing Git
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\PraiseTheLord\HSBGInfotech\Others\vilas\devops\git\GitHandsOn.txt
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	 Installing Git on a Mac
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://git-scm.com/book/en/v2/Getting-Started-Installing-Git
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Installing Git on Windows
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://git-scm.com/book/en/v2/Getting-Started-Installing-Git
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Installing Git on Linux
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://git-scm.com/book/en/v2/Getting-Started-Installing-Git
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Configuring Git
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
-------------------------------------------
Reference: https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token


Log into GitHub
Click on your name / Avatar in the upper right corner and select Settings
On the left, click Developer settings
Select Personal access tokens and click Generate new token
Give the token a description/name and select the scope of the token
I selected repo only to facilitate pull, push, clone, and commit actions
Click the link Red more about OAuth scopes for details about the permission sets
Click Generate token
Copy the token – this is your new password!


git config --global user.name "vilasvarghese"
git config --global user.email "vilas.varghese@gmail.com"
git config -l

git clone 
	provide tocken instead of pwd
	
To not remember you git token
	git config --global credential.helper cache
	git config --global credential.helper cache
	git pull	
		enter user and pwd (last time)
		
To undo cache (if token is no more valid)
	git config --global --unset credentail.helper 
	git config --global --unset credential.helper
	git pull
	
	
Further details: https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup
	
Code base for git: https://github.com/git/git	
	
-------------------------------------------
o Getting started with Git
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://www.javatpoint.com/git
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	 Initializing a repository
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://kbroman.org/github_tutorial/pages/init.html
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Understanding where and how Git files are stored
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Preferably we can do this a little latter.
D:\PraiseTheLord\HSBGInfotech\Others\vilas\devops\git\GitOneDay_Notes
	 Section: "Internals of Git"
https://www.linkedin.com/pulse/git-internals-how-works-kaushik-rangadurai/
https://www.daolf.com/posts/git-series-part-1/


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 git add
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	N.B: git will not show files within directories that are untracked.
	
	Create 
		2 folders
			2 files with in each folder
		2 files in root directory
		a .gitignore file

	git status
		This will not show files inside untracked sub directory

	https://git-scm.com/docs/git-add
		git add .
		git status
		git reset
		git status
		git add -A or git add --all
			stage all changes in the working tree.
			If this command is executed from a subdirectory. Still it will add files outside the directory (including parent directory and other sub directories)
			
		Stage files in any directory including subdirectory
			.gitignore file
			delete files
			modified files
			add files 
	N.B. "-A" is the default and is automatically appeneded when using "." or any directory.
			
			

		git reset
			unstage all changes
		git status 
			display status

		add and commit all files.
		Create a new file in sub folders and root folder
		Remove one file from all the folders
		Update one file in all three folders

		
		git add -A <directory>/ 	
			#add/remove/update only the content with in the directory mentioned.
		git add -A is the default.
		So git add -A mydir/ is similar to git add -A
		
		git add --no-all .
			will not stage deleted files
		git status
		git reset
		git status
		git add -u or git add --update
			will stage all modified and updated files. 
			But will not stage (add) untracked files
		git status
		git reset
		git status
		git add -u dir/
		git status
		git reset
		git status
		
		git add . #. - current directory
			diff. with git add -A.
			Same only if git add . is executed from the root directory.
			
			So if you execute from a subdirectory it is not the same.
		
		git add * 
			N.B: Now this stages everything.
			But in the past it could have give unexpected results.
			ls * will not display 
				delete files 
				.gitignore file
			So accordingly
			git add *
				will not stage 
					deleted files in root directoyr
					.gitignore file
				will stage
					untracked files in root directory and subdirectory
					deleted files in subdirectory
						surprisingly deleted files in subdirectory works.
			Preferably don't use git add *
					
					
	For more information
		fit 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 git commit
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		ls -la
		git commit -m "message"
		
		git commit --help
		git commit --dry-run .
		git commit --reuse-message=<commit id>
		git commit --dry-run --short .
		
		#If you want to selectively commit only tracked files (ignore new files added)
		git commit -a	

		#Modify existing commit message
		git commit -amend 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Writing commit messages
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		git commit -m "message"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Viewing the commit log
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		git log
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
a)
	git log 
		utility tool to review and read a history of everything that happens to a repository. 
		Multiple options can be used with a git log to make history more specific.


	Generally, the git log is a record of commits. 
	A git log contains the following data:
		A commit hash, which is a 40 character checksum data generated by SHA (Secure Hash Algorithm) algorithm. It is a unique number.
		Commit Author metadata: The information of authors such as author name and email.
		Commit Date metadata: It's a date timestamp for the time of the commit.
		Commit title/message: It is the overview of the commit given in the commit message.


b)
	git log --oneline  
	So, usually we can say that the --oneline flag causes git log to display:
	Multiple commits are listed.	
		one commit per line
		the first seven characters of the SHA
		the commit message
	
--------------------------------------------------	
D:\temp\test>git log --oneline
040578c (HEAD -> master) testing
a636d90 teeeest
7894783 test
--------------------------------------------------
	Every commit has a single line
	
	
c)
Git Log Stat
	The log command displays 
		files that have been modified. 
		number of lines and 
		summary line of the total records that have been updated.

	Generally, we can say that the stat option is used to display
		the modified files,
		The number of lines that have been added or removed
		A summary line of the total number of records changed
		The lines that have been added or removed.
		It will be used as follows:

$ git log --stat  	
	Uaw :q to quit.
	
d)
Git log P or Patch
	The git log patch command displays 
		the files that have been modified. 
		location of the 
			added, 
			removed, and 
			updated lines.

	It will be used as:

	$ git log --patch  
	Or

	$ git log -p  
	Generally, we can say that the --patch flag is used to display:

	Modified files
		The location of the lines that you added or removed
		Specific changes that have been made.

	See changes to a particular file
		git log -p <file>


e)
Git log command allows viewing your git log as a graph. 
To list the commits in the form of a graph, 
run the git log command with --graph option. It will run as follows:

	$ git log --graph  
	
	To make the output more specific, you can combine this command with --oneline option. It will operate as follows:

	$ git log --graph --oneline  
	
	
f)	Filtering the Commit History
	We can filter the output according to our needs. It's a unique feature of Git. We can apply many filters like amount, date, author, and more on output. Each filter has its specifications. They can be used for implementing some navigation operations on output.

	Let's understand each of these filters in detail.

By Amount (number of last commit):

	We can limit the number of output commit by using git log command. 
	$ git log --graph --oneline -2
	
	
By Date and Time:

	We can filter the output by date and time. 
	--after or 
	--before argument to specify the date. These both argument accept a variety of date formats. It will run as follows:

	$ git log --after="yy-mm-dd"  
	The above command will display all the commits made after the given date. Consider the below output:

	git log --after="21 days ago"  
	The above command will display the commits which have been made 21 days ago. Consider the 
	
	
	$ git log --after="2021-04-01" --before="2021-05-08"  

	Alternatively we can use 
		--since and --until instead of --after and --before. 
		Because they are synonyms, respectively.
	
	
By Author:

	$ git log --author="Author name"	
	
		git log --author="vilas"
		git log --author="@gmail.com"  
	
	
By Commit message:

	To filter the commits by the commit message. We can use the grep option, and it will work as the author option.

	It will run as follows:

	$ git log --grep=" Commit message."	





-------------------------------------------------------------------
The following example pushes changes even if it does not end in a non-fast-forward merge. Beginners should not use this option:

Pushes even the file mentioned in ignorefile
	git push --force

This example adds all local branches to the indicated remote repository:
	git push --all

The following example pushes all local tags to the remote:
	git push --tags
-------------------------------------------------------------------


o Git Concepts and Architecture
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	 Exploring the three-trees architecture
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.designveloper.com/blog/git-concepts-architecture/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 The Git workflow
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://medium.com/free-code-camp/learn-the-basics-of-git-in-under-10-minutes-da548267cc91
https://www.atlassian.com/git/tutorials/comparing-workflows
	Try it before you go.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Working with the HEAD pointer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	

o The basic flows
	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.javatpoint.com/git-terminology
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	 Adding files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Already covered.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Editing files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Viewing changes with diff
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Compare the different versions of data sources. 
	The version control system stands for working with a modified version of files. 
	So, the diff command is a useful tool for working with Git.
	
Scenerio1: Track the changes that have not been staged.

	git diff command 
		track the changes that have not been staged.
	Edit the newfile1.txt file. 
	Track what changes are not staged yet (with tracked files). 
		git diff 
		
	Changes made on newfile1.txt are displayed by git diff command. 
	
Scenerio2: Track the changes that have staged but not committed:

	git diff command 
		allows us to track the changes that are staged but not committed. 
		
	To check the already staged changes, use the 
		git diff --staged .

	To check the untracked file
		git status 
		
		
	If file is 
		added to the staging area (git add)
		but it is not committed yet. 
		can track the changes in the staging area also. 
		
		$ git diff --staged  

Scenerio3: Track the changes after committing a file:
	Track the changes after committing a file (git commit -m). 
		git diff HEAD
		
Scenario4: Track the changes between two commits:

	Track the changes between last two commits. 
		$ git log  

	Track the changes made to a file (need not be last two commits)
		$ git log -p --follow -- filename  	
	
	
	Track difference between two commits in the history
		git diff <commit1-sha> <commit2-sha>  
	

Git Diff Branches
	$ git diff <branch 1> < branch 2>  

	The above command will display the differences between branch 1 and branch 2. 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Viewing only staged changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Already covered
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Deleting files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Delete untracked files
		rm -rf 
	
	To remove the file from the Git repository and the filesystem (working dir), use:
		git rm file1.txt
		git commit -m "remove file1.txt"
		
	But if you want to remove the file only from the Git repository and not remove it from the filesystem, use:
		git rm --cached file1.txt
		git commit -m "remove file1.txt"	

	To remove directory and content 
		git rm -r directory 
		- r can be used with all above commands to do it recursively on directories.

	To remove sensitive data - Avoid as much as possible(from all commit's in history too)
		https://help.github.com/articles/remove-sensitive-data/
	
	To revert the previous stage
		git reset
	or v2.24.0+ use
		git restore --staged .

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Moving and renaming files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Move the hello.html file to the lib directory
		mkdir lib
		git mv hello.html lib
		git status

	By moving files with git, we notify git about two things
		hello.html file was deleted.
		lib/hello.html file was created.
	Both facts are staged immediately and ready for a commit. 
	Git status command reports the file has been moved.

	So it is equivalent to 
		mkdir lib
		mv hello.html lib
		git add lib/hello.html
		git rm hello.html



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	

o Undoing Changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	 Undoing working directory changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Unstage all files you might have staged with git add:
		git reset

	Revert all local uncommitted changes (should be executed in repo root):
		git checkout .	

	Revert uncommitted changes only to particular file or directory:
		git checkout [some_dir|file.txt]

	Revert all uncommitted changes (longer to type, but works from any subdirectory):
		git reset --hard HEAD

	Remove all local untracked files, so only git tracked files remain:
		git clean -fdx

	WARNING: -x will also remove all ignored files, including ones specified by .gitignore! You may want to use -n for preview of files to be deleted.


	Nothing in Git is deleted, so when you work in Git, you can undo your work.
	
	When you can undo changes
	In the standard Git workflow:
		Untracked files: New file created
		Unstaged files: Edit a staged file. 
			Untracked is also a unstaged file.
		Index files/Staged files:  
			git add, git mv etc.
		Committed file 
			(git commit).
		File pushed to remote repo.
			(git push).


You can undo changes at any point in this workflow:
(Expectation with undo)
Undo 
	changes locally done and haven’t yet pushed to a remote repository.
	changes already pushed to a remote repository and you want to:
		Keep the history intact (preferred).
		Change the history (requires coordination with team and force pushes)


#Undo unstaged local changes
----------------------------
	Confirm that the file is unstaged 
	(that you did not use git add <file>) 
		
		$ git status

	To overwrite local changes:
		git checkout -- <file>

	To save local changes so you can re-use them later:
		git stash

	To discard local changes to all files, permanently:
		git reset --hard


#Undo staged local changes
--------------------------
Confirm that the file is staged 
	(that you used git add <file>) 

	$ git status

	To unstage the file but keep your changes:
		git restore --staged <file>

	To unstage everything but keep your changes:
		git reset

	To unstage the file to current commit (HEAD):
		git reset HEAD <file>

	To discard all local changes, but save them for later:
		git stash

	To discard everything permanently:
		git reset --hard


#Quickly save local changes
---------------------------
If you want to change to another branch
	git stash.

From the branch where you want to save your work, 
	git stash.

	Swap to another branch (git checkout <branchname>).
		Commit, push, and test.
	Return to the branch where you want to resume your changes.
	Use git stash list to list all previously stashed commits.
	Run a version of git stash:
		Use git stash pop 
			to redo previously stashed changes and remove them from stashed list.
		Use git stash apply 
			to redo previously stashed changes, but keep them on stashed list.

Further details : https://docs.gitlab.com/ee/topics/git/numerous_undo_possibilities_in_git/

For more undoing changes: 
	https://www.javatpoint.com/git-rm
	https://www.javatpoint.com/git-cherry-pick
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Unstaging files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Already covered
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Amending commits
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Reference: https://docs.github.com/en/github/committing-changes-to-your-project/changing-a-commit-message

	Except for the commit message not much can be changed

	You can change the most recent commit message using the 
		git commit --amend command.
	
	
	Commit has not been pushed online
If the commit only exists in your local repository and has not been pushed to GitHub, you can amend the commit message with the 
	git commit --amend command.

On the command line, navigate to the repository that contains the commit you want to amend.

Type git commit --amend and press Enter.

In your text editor, edit the commit message, and save the commit.

You can add a co-author by adding a trailer to the commit. For more information, see "Creating a commit with multiple authors."

You can create commits on behalf of your organization by adding a trailer to the commit. For more information, see "Creating a commit on behalf of an organization"
	
	
	
	Amending older or multiple commit messages
If you have already pushed the commit to GitHub, you will have to force push a commit with an amended message.

We strongly discourage force pushing, since this changes the history of your repository. If you force push, people who have already cloned your repository will have to manually fix their local history. For more information, see "Recovering from upstream rebase" in the Git manual.

Changing the message of the most recently pushed commit

Follow the steps above to amend the commit message.
Use the push --force command to force push over the old commit.
$ git push --force example-branch
Changing the message of older or multiple commit messages

If you need to amend the message for multiple commits or an older commit, you can use interactive rebase, then force push to change the commit history.

On the command line, navigate to the repository that contains the commit you want to amend.

Use the git rebase -i HEAD~n command to display a list of the last n commits in your default text editor.

# Displays a list of the last 3 commits on the current branch
$ git rebase -i HEAD~3
The list will look similar to the following:

pick e499d89 Delete CNAME
pick 0c39034 Better README
pick f7fde4a Change the commit message but push the same commit.

# Rebase 9fdb3bd..f7fde4a onto 9fdb3bd
#
# Commands:
# p, pick = use commit
# r, reword = use commit, but edit the commit message
# e, edit = use commit, but stop for amending
# s, squash = use commit, but meld into previous commit
# f, fixup = like "squash", but discard this commit's log message
# x, exec = run command (the rest of the line) using shell
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
Replace pick with reword before each commit message you want to change.

pick e499d89 Delete CNAME
reword 0c39034 Better README
reword f7fde4a Change the commit message but push the same commit.
Save and close the commit list file.

In each resulting commit file, type the new commit message, save the file, and close it.

When you're ready to push your changes to GitHub, use the push --force command to force push over the old commit.

$ git push --force example-branch
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Retrieving old versions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Restore working dir to the latest in remote repo.
		$ git checkout HEAD fil
		ename

	$ git log --oneline
		79a4e5f bad take
		f449007 The second commit
		55df4c2 My great project, first commit.

	$ git checkout 55df4c2 filename

	

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Reverting a commit
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://opensource.com/article/18/6/git-reset-revert-rebase-commands

#Reset
------
	like a "rollback"—
	it points your local environment back to a previous commit. 
	"local environment," 
		local repository
		staging area
		working directory.

	$ git log --oneline
		b764644 File with three lines
		7c709f0 File with two lines


	If we want to roll back to a previous commit. 
	Git can just move the branch pointer. 

	Restting to an absolute checkin
	$ git reset b764644 (using an absolute commit SHA1 value b764644)
	or
	Restting to a relative checkin
	$ git reset current~2 (using a relative value -2 before the "current" tag)


	Refer more details on git reset below.
	
#Revert
-------
The net effect of the git revert command 
	similar to reset
	but its approach is different. 
	
	Reset command: moves the branch pointer back in the chain (typically) to "undo" changes
		git reset HEAD~1
	Revert command: adds a new commit at the end of the chain to "cancel" changes. 
	
	
$ git revert HEAD #Revert the commit pointed by HEAD.
	This adds a new commit
	Git will prompt for the commit message:

	Revert "File with three lines"
-----------------------------------------------------------------------
This reverts commit b764644bad524b804577684bf74e7bca3117f554.

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#       modified:   file1.txt
#
-----------------------------------------------------------------------


$ git log --oneline
11b7712 Revert "File with three lines"
b764644 File with three lines
7c709f0 File with two lines
9ef9173 File with one line
Here are the current contents of the file in the working directory:

#Added a new line in the commit history /logs
-----------------------------------------------------------------------

Revert or reset?
	Revert is a nicer way to cancel out changes 
		Git workflow works well for 
			picking up additional commits at the end of a branch
			challenging if a set of commits is no longer seen (git reset)

Fundamental rule in git
	avoid making changes that rewrite history 
		if the commits have already been pushed to the remote repository 
		others may be working with them.

Other people depending on your remote repo. is going have a trouble if you do reset.

Original chain of commits was still present in your drive after we did the reset. 
We moved the pointer and reset the code back to a previous commit
	but it did not delete any commits. 
	So we can "restore" back to the previous point by simply resetting back to the original head of the branch:

git reset <sha1 of commit>
	A similar thing happens in most other operations we do in Git when commits are replaced. New commits are created, and the appropriate pointer is moved to the new chain. But the old chain of commits still exists.



Rebase
------
	Now let's look at a branch rebase. 
	Refer to image in rebase section in 
	https://opensource.com/article/18/6/git-reset-revert-rebase-commands
	
	git checkout a
	git rebase b
	
	go to b's latest commit
	Apply all the commit's of a one by one.
	(Refer above image to understand this).
	
fyi: checkout will download the files in local repo.
		It will not make any change to the history.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Using reset to undo commits
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Already covered
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 soft reset
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://davidzych.com/difference-between-git-reset-soft-mixed-and-hard/
	Reset the Local repo. 
	Leaving the changes in HEAD in working copy staged.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 mixed reset
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://davidzych.com/difference-between-git-reset-soft-mixed-and-hard/
	Reset Local repo. and stage (index). Changes in HEAD available in the working copy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 hard reset
	Reset everything.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://davidzych.com/difference-between-git-reset-soft-mixed-and-hard/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Untracked files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Untracked files 
		files in your working directory 
			that were not in your last snapshot (new files added)
		or
			are not in your staging area (modified since last git add)
			

	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Removing untracked files
	If you have autogenerated files and you don't want git to track them
		define them in .gitignore
	
	If you have added new files 
		Before running the actual command and removing untracked files and directories use the -n option that will perform a “dry run” and show you what files and directories will be deleted:

			git clean -d -n 
			
		To delete the file
			git clean -d -f
	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	

o Branching
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	 Branching overview
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Viewing and creating branches
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	git branch <branch>
	https://www.javatpoint.com/git-branch
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Switching branches
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	git checkout <branch>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Creating and switching branches
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	git checkout -b <branch>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Switching branches with uncommitted changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		always, add, commit or stash your changes before switching
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Comparing branches
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	git diff <branch1> <branch2>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Renaming branches
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://linuxize.com/post/how-to-rename-local-and-remote-git-branch/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Deleting branches
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Delete local branches
		delete merged branch
			git branch -d <branch>
			
		delete unmerged branch
			git branch -D <branch>
	
	Delete remote branch
		git push <remote> --delete <branch>
		git push origin --delete fix/authentication
		
	Reference: https://www.freecodecamp.org/news/how-to-delete-a-git-branch-both-locally-and-remotely/	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Configuring the command prompt to show the branch
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
		https://docs.gitlab.com/ee/gitlab-basics/start-using-git.html
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Merging Branches
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		https://www.javatpoint.com/git-merge-and-merge-conflict
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Merging code
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Already covered in the above topic.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Fast-forward merge vs. true merge
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		https://medium.com/@koteswar.meesala/git-fast-forward-merge-vs-three-way-merge-8591434dd350
		https://www.atlassian.com/git/tutorials/using-branches/git-merge
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Merging conflicts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Already covered 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Resolving merge conflicts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Already covered 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Exploring strategies to reduce merge conflicts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		https://www.openbankproject.com/how-to-avoid-merge-conflicts-on-git/
		http://nvie.com/posts/a-successful-git-branching-model/
			master
			hotfixes
			release branches
			develop
			feature branches
		Merge asap (at least once a day)
			

	Other common learnings
Prevention rules:
	Whenever it is possible, use a new file in preference to an existing one
	(the only ambiguity could happen is the same name and path of the file)
	Do not always put your changes at the end of a file
	(decreases the probability of editing the same line of code)
	Do not organise imports
	(decreases the probability of editing the same line of code)
	Do not beautify a code outside of your changes
	(decreases the probability of editing the same line of code)
	Push and pull changes as often as you can
	(Mitigates distributed nature of Git)
	

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Fast Forward Merge
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Already covered
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Three way Merge
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Already covered
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Rebasing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Already covered
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Webhooks 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 What is a webhook 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Use cases of Webhook 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Introduction and Webhook in 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		 Bitbucket 
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		 Github 
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		 Gitlab 
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		 ADO
	https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token
	
	
	
Maven – 1 Day
References: 
	https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#
	https://www.javatpoint.com/maven-tutorial
	
	https://www.youtube.com/watch?v=0CFWeVgzsqY&t=1s
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	o What is Maven?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	Maven 
		project management tool 
		based on POM (project object model). 
		Supports 
			projects build, 
			dependency 
			documentation
				ect.

	Next Gen ANT.


Understanding the problem without Maven
---------------------------------------
Common issues in dev.:
	1) Dependency management: 
		Most of the projects would have dependencies	
			e.g. 
				struts, 
				spring, 
				hibernate frameworks.
	2) Defining a standard project structure: 
		Web application would need a folder structure -
			servlet, 
			struts etc doesn't work without the proper structure
	3) Building and Deploying the project: 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Why do we need Maven?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Eases the build process
Provides uniform build process 
	(maven project can be shared by all the maven projects)
Provides project information 
	log document, 
	cross referenced sources
	mailing list
	dependency list
	unit test reports etc.)
Easy to migrate for new features of Maven
Easy to upgrade dependencies and transitive dependencies
Apache Maven helps to manage
	Builds
	Documentation
	Reporing
	SCMs
	Releases
	Distribution


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Maven Lifecycle and Phase
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Maven
	Tool to build and manage any Java-based project. 
	day-to-day work made easy
	Helps with building and running of any Java-based project.

Refer any image on lifecycle

Maven Lifecycle: 
	3 different lifecyle
		Build/default lifecycle
		Clean lifecycle
		Site lifecycle
	
	Each lifecycle has 
		One or more phases associated with them
	
	Each Phases have
		one or more plugins associated with it.
		Plugins help execute the target.
		
	Lifecycle (1) - (*) Phases (1) - 
		
		
	Phases of Default Maven lifecycle and its 8 steps: 
		Validate
		Compile 
		Test
		Package 
		Integration test
		Verify
		Install and 
		Deploy.


	Maven 
		follows a sequential order to execute the commands 
		Execute step n
			all steps preceding it (Step 1 to n-1) are also executed. 
			
			

	Validate: 
		Validates if the project structure is correct. 
			Checks if all the dependencies have been downloaded 
				and available in the local repository.
	Compile: 
		Compiles the source code
		Moves classes in to target/classes folder.
	Test: 
		Runs unit tests for the project.
		Test the compiled source code using a suitable unit testing framework. 
		These tests should not require the code be packaged or deployed.
	Package: 
		Package the compiled code in distributable format like JAR or WAR.
	Integration test: 
		It runs the integration tests for the project.
	Verify: 
		This step runs checks to verify that the project is valid and meets the quality standards.
	Install: 
		This step installs the packaged code to the local Maven repository.
	Deploy: 
		Copy packaged code to the remote repository for sharing.
		done in the build environment, copies the final package to the remote repository for sharing with other developers and projects.

e.g. of common commands
	mvn verify
		will execute validate, compile, package, integration test and verify
	mvn clean deploy
	mvn clean install


---------------------------------------------------------
-------------------------
1. Lifecycle default/ Build Lifecycle - [validate, initialize, generate-sources, process-sources, 

generate-resources, process-resources, compile, process-classes, 

generate-test-sources, process-test-sources, generate-test-resources, 

process-test-resources, test-compile, process-test-classes, test,
 
prepare-package, package, pre-integration-test, integration-test, 

post-integration-test, verify, install, deploy]


---------------------------------------------------------------------------------------------

▶️ 2. Lifecycle clean - [pre-clean, clean, post-clean]

Clean Lifecycle have 3 phases:

1. Pre Clean: In this some process which are required prior to Clean phase are executed.

2. Clean : In this , we actually clean the multiple files in the target folders generated in Previous Build. This can include few temporary files, project JARs, Source files and compiled classes
This is required so that we get fresh build.

3. Post Clean: In this , few processes executes to finalize cleaning of the Project. 

Here main phase is the Clean phase. Build Lifecycle is used to compile, Execute testcases and create Project JAR.

Means we will clean our project first with mvn clean so that we will get fresh build after running mvn install.
----------------------------------------------------------------------------------------------


▶️ 3. Lifecycle site - [pre-site, site, post-site, site-deploy]

The flow is sequential, phases runs one after another step by step,

Ex-for default lifecycle, it starts with validate, then initialize and so on...
-------------------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Maven Phases
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A Build Phase is Made Up of Plugin Goals

	Build phase is responsible for a specific step in the build lifecycle
	Execution of a phase is done by executing goals bound to those build phases.

A plugin goal represents a specific task (finer than a build phase) which contributes to the building and managing of a project. It may be bound to zero or more build phases.
The order of execution depends on the order in which the goal(s) and the build phase(s) are invoked. 
For example, consider the command below. 
	The clean and package arguments are build phases
		while the dependency:copy-dependencies is a goal (of a plugin).
		
		

mvn clean dependency:copy-dependencies package
If this were to be executed, the clean phase will be executed first (meaning it will run all preceding phases of the clean lifecycle, plus the clean phase itself), and then the dependency:copy-dependencies goal, before finally executing the package phase (and all its preceding build phases of the default lifecycle).

Moreover, if a goal is bound to one or more build phases, that goal will be called in all those phases.

Build phase can also have zero or more goals bound to it.
 If a build phase has no goals bound to it, that build phase will not execute. But if it has one or more goals bound to it, it will execute all those goals.

(Note: In Maven 2.0.5 and above, multiple goals bound to a phase are executed in the same order as they are declared in the POM, however multiple instances of the same plugin are not supported. Multiple instances of the same plugin are grouped to execute together and ordered in Maven 2.0.11 and above).

[top].

Some Phases Are Not Usually Called From the Command Line
The phases named with hyphenated-words (pre-*, post-*, or process-*) are not usually directly called from the command line. These phases sequence the build, producing intermediate results that are not useful outside the build. 

Code coverage tools such as Jacoco and execution container plugins such as Tomcat, Cargo, and Docker bind goals to the pre-integration-test phase to prepare the integration test container environment. These plugins also bind goals to the post-integration-test phase to collect coverage statistics or decommission the integration test container.

Failsafe and code coverage plugins bind goals to integration-test and verify phases. The net result is test and coverage reports are available after the verify phase. If integration-test were to be called from the command line, no reports are generated. Worse is that the integration test container environment is left in a hanging state; the Tomcat webserver or Docker instance is left running, and Maven may not even terminate by itself.

[top].

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Maven Plugins
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compile	: compiler plugin
test	: Surefire, TESTNG
package	: javac -jar : jar, war, ear


A Maven plugin is a group of goals. However, these goals aren't necessarily all bound to the same phase.

For example, here's a simple configuration of the Maven Failsafe plugin which is responsible for running integration tests:

<build>
    <plugins>
        <plugin>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>${maven.failsafe.version}</version>
            <executions>
                <execution>
                    <goals>
                        <goal>integration-test</goal>
                        <goal>verify</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>
    </plugins>
</build>
As we can see, the Failsafe plugin has two main goals configured here:


	freestar
	integration-test: run integration tests
	verify: verify all integration tests passed
	We can use the following command to list all goals in a specific plugin:

	mvn <PLUGIN>:help
	For example, to list all goals in the Failsafe plugin:

	mvn failsafe:help
	And the output of this will be:

	This plugin has 3 goals:

	failsafe:help
	  Display help information on maven-failsafe-plugin.
	  Call mvn failsafe:help -Ddetail=true -Dgoal=<goal-name> to display parameter
	  details.

	failsafe:integration-test
	  Run integration tests using Surefire.

	failsafe:verify
	  Verify integration tests ran using Surefire.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Maven Goals
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Each phase is a sequence of goals, and each goal is responsible for a specific task.
	
	When we run a phase – 
		all goals bound to this phase are executed in order.

Here are some of the phases and default goals bound to them:
	compiler:compile – the compile goal from the compiler plugin is bound to the compile phase
	compiler:testCompile is bound to the test-compile phase
	surefire:test is bound to test phase
	install:install is bound to install phase
	jar:jar and war:war is bound to package phase

To list 
	We can list all 
		phases, plugins and goals bound to a specific execution execute the command:

		mvn help:describe -Dcmd=PHASENAME
		mvn help:describe -Dcmd=compile


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Maven Repository
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
Maven Repository
	directory of packaged JAR file with pom.xml file. 
	Maven searches for dependencies in the repositories. 
	There are 3 types of maven repository:
		Local Repository
		Central Repository
		Remote Repository
			Search dependency in remote repository/repositories
	Maven stops processing and throws error (Unable to find dependency).

Maven searches for the dependencies in the following order:
	Local repository 
	Central repository 
	Remote repository.


1) Maven Local Repository
	located in your local system. 
	Created by the maven when you run any maven command.
	When you run a Maven build, 
		Maven automatically downloads all the dependency jars into the local repository. 
	It helps to avoid references to dependencies stored on remote machine every time
	By default
		%USER_HOME%/.m2 directory. 
	For example: C:\Users\vilas\.m2

Change the location of maven local repository 
	by changing the settings.xml file. 
		located in MAVEN_HOME/conf/settings.xml, 
		
	In my machine
		which mvn
			/d/software/maven/apache-maven-3.6.3-bin/apache-maven-3.6.3/bin/mvn
		/d/software/maven/apache-maven-3.6.3-bin/apache-maven-3.6.3/bin/mvn/settings.xml

D:\software\maven\apache-maven-3.6.3-bin\apache-maven-3.6.3\conf\settings.xml
		
2) Maven Central Repository
	Located on the web - requires internet access to be searched.
	It has been created/managed by the apache maven community itself.
	It is not required to be configured.
	

	The path of central repository is: http://repo1.maven.org/maven2/.

	The central repository contains a lot of common libraries that can be viewed by this url http://search.maven.org/#browse.


3) Maven Remote Repository
	located on the web. 
	Most of libraries can be missing from the central repository 
		e.g. JBoss library etc
		define remote repository in pom.xml file.

	To add the spring library in pom.xml file.	
----------------------------------------------------	
  <repositories>
        <repository>
            <id>spring-repo</id>
            <url>https://repo.spring.io/release</url>
        </repository>
  </repositories>	
----------------------------------------------------	
	
Further read:
	How to deploy your internal repository?
		https://maven.apache.org/guides/introduction/introduction-to-repositories.html	
	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Maven Release and Version
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://maven.apache.org/docs/history.html


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Installing Maven
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Installing maven in windows	
	https://www.javatpoint.com/how-to-install-maven
	Installing maven in centos: my notes
	o Pom.xml and Setting.xml
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.tutorialspoint.com/maven/maven_pom.htm
	POM stands for Project Object Model. It is fundamental unit of work in Maven. It is an XML file that resides in the base directory of the project as pom.xml.

The POM 
contains 
	information about 
		project 
		various configuration detail 
			used by Maven to build the project(s).

	goals and plugins.
	While executing a task or goal
		Maven looks for the POM in the current directory. 
		Reads the POM
		gets the needed configuration information
		executes the goal. 
	Some of the configuration that can be specified in the POM are following −
		project dependencies
			plugins
			goals
			build profiles
			project version
			developers
			mailing list
	POM, we should first decide the project group (groupId), its name (artifactId) and its version as these attributes help in uniquely identifying the project in repository.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Understanding and using Maven Archetypes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Archetype 
		Maven project templating toolkit. 
		Archetype is defined as 
			an original pattern/model from which all other things of the same kind are made. 
			Help authors create Maven project templates for users
			provides users with the means to generate parameterized versions of those project templates.
	we use archetypes to try and get our users up and running as quickly as possible by providing a sample project that demonstrates many of the features of Maven
	while introducing new users to the best practices employed by Maven. 
	In a matter of seconds, a new user can have a working Maven project to use as a jumping board for investigating more of the features in Maven. We have also tried to make the Archetype mechanism additive, and by that we mean allowing portions of a project to be captured in an archetype so that pieces or aspects of a project can be added to existing projects. A good example of this is the Maven site archetype. If, for example, you have used the quick start archetype to generate a working project, you can then quickly create a site for that project by using the site archetype within that existing project. You can do anything like this with archetypes.

You may want to standardize J2EE development within your organization, so you may want to provide archetypes for EJBs, or WARs, or for your web services. Once these archetypes are created and deployed in your organization's repository, they are available for use by all developers within your organization.

Using an Archetype
To create a new project based on an Archetype, you need to call mvn archetype:generate goal, like the following:

mvn archetype:generate

Provided Archetypes
Maven provides several Archetype artifacts:

Archetype ArtifactIds	Description
maven-archetype-archetype	An archetype to generate a sample archetype project.
maven-archetype-j2ee-simple	An archetype to generate a simplifed sample J2EE application.
maven-archetype-mojo	An archetype to generate a sample a sample Maven plugin.
maven-archetype-plugin	An archetype to generate a sample Maven plugin.
maven-archetype-plugin-site	An archetype to generate a sample Maven plugin site.
maven-archetype-portlet	An archetype to generate a sample JSR-268 Portlet.
maven-archetype-quickstart	An archetype to generate a sample Maven project.
maven-archetype-simple	An archetype to generate a simple Maven project.
maven-archetype-site	An archetype to generate a sample Maven site which demonstrates some of the supported document types like APT, XDoc, and FML and demonstrates how to i18n your site.
maven-archetype-site-simple	An archetype to generate a sample Maven site.
maven-archetype-webapp	An archetype to generate a sample Maven Webapp project.



https://www.vojtechruzicka.com/maven-archetypes/
https://www.baeldung.com/maven-archetype

1.a		
	mvn archetype:generate -DarchetypeGroupId=org.springframework.boot -DarchetypeArtifactId=spring-boot-sample-simple-archetype -DarchetypeVersion=1.0.2.RELEASE
1.b
	mvn archetype:generate 
		-DarchetypeGroupId=org.springframework.boot 
		-DarchetypeArtifactId=spring-boot-sample-simple-archetype 
		-DarchetypeVersion=1.0.2.RELEASE



2. a
	
	mvn archetype:generate -DarchetypeGroupId=org.springframework.boot -DarchetypeArtifactId=spring-boot-sample-simple-archetype -DarchetypeVersion=1.0.2.RELEASE -DartifactId=my-app -DgroupId=com.example -Dversion=1.0-SNAPSHOT -DinteractiveMode=false

2. b	
	mvn archetype:generate 
		-DarchetypeGroupId=org.springframework.boot 
		-DarchetypeArtifactId=spring-boot-sample-simple-archetype 
		-DarchetypeVersion=1.0.2.RELEASE 
		-DartifactId=my-app 
		-DgroupId=com.example 
		-Dversion=1.0-SNAPSHOT 
		-DinteractiveMode=false

3. a
	
	Create your own custom archetype using a Maven archetype. 
	--------------------------------------------------------

	mvn archetype:generate -DgroupId=my.project.group.id -DartifactId=my-project-artifact-id -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-archetype
	
	mvn archetype:generate
	-DgroupId=my.project.group.id
	-DartifactId=my-project-artifact-id
	-DarchetypeGroupId=org.apache.maven.archetypes
	-DarchetypeArtifactId=maven-archetype-archetype

Archetype configuration
POM file
	In the artifact's root directory, 
		there is a pom.xml file of the archetype. 
		You can see the packaging maven-archetype. 
		You can customize build of your archetype here as with any other pom.

	There is another pom.xml file located under 
		src\main\resources\archetype-resources 
		pom file 
			make any changes required in the resulting project's pom.


	Source code
	You can put any source files, which need to be part of the output project under
		src/main/resources/archetype-resources/

That is:
Java code:
	src/main/resources/archetype-resources/src/main/java

Test code:
	src/main/resources/archetype-resources/src/test/java

Resources:
	src/main/resources/archetype-resources/src/main/resources
Archetype metadata
	Each archetype contains a special XML file with the archetype configuration, which can be found under:

src/main/resources/archetype-resources/META_INF/maven/maven-metadata.xml
Here you can configure the archetype itself - for example, files which should be included, properties needed, and so on. A simple version can look something like this:

<archetype-descriptor
        xsi:schemaLocation="http://maven.apache.org/plugins/maven-archetype-plugin/archetype-descriptor/1.0.0
        http://maven.apache.org/xsd/archetype-descriptor-1.0.0.xsd"
        xmlns="http://maven.apache.org/plugins/maven-archetype-plugin/archetype-descriptor/1.0.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        name="quickstart">
    <fileSets>
        <fileSet filtered="true" packaged="true">
            <directory>src/main/java</directory>
        </fileSet>
        <fileSet>
            <directory>src/test/java</directory>
        </fileSet>
    </fileSets>
</archetype-descriptor>
You can check configuration details in the official documentation.

There should be a single POM file for each project.
	All POM files require the project element and three mandatory fields: 
		groupId, 
		artifactId, 
		version.
	Projects notation in repository is groupId:artifactId:version.
	Minimal requirements for a POM −
		Project root
			Project root tag. 
			Specify the basic schema settings like 
				apache schema and w3.org specification.

		Model version
			Should be 4.0.0.
		groupId
			Id of project's group. 
			Unique for an organization or a project. 
			e.g. com.company.bank has all bank related projects.
		artifactId
			Id of the artifact. 
			This is generally name of the project. For example, consumer-banking. Along with the groupId, the artifactId defines the artifact's location within the repository.
		version
			version of the project. 
			
		groupId, artifact id and version participate in the name of the artifact.
			com.company.bank:consumer-banking:1.0.war


Super POM
	Maven’s default POM. 
	All POMs inherit from a parent or default 
		(despite explicitly defined or not). 
	This base POM is known as the Super POM
		located in the Maven binaries.
	contains values inherited by default.

	Maven use the effective POM 
		Maven merges Super POM and my project POM 
			this is called Effective POM
		(configuration from super pom plus project configuration - pom) 
		execute relevant goal. 
	Developers needs to define minimum configuration detail in his/her pom.xml.
	Configurations can be overridden easily.

	An easy way to look at the default configurations of the super POM is by running the following command: 
	
		mvn help:effective-pom

	Refer to devops/maven/1/pom.xml
		mvn help:effective-pom

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Maven Dependencies
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.tutorialspoint.com/maven/maven_external_dependencies.htm
	https://www.tutorialspoint.com/maven/maven_manage_dependencies.htm

	Typically projects have dependencies.
	Dependencies: solution pre-build which one can use it as it is.
	
	Transitive Dependencies Discovery
	  A
	  ├── B(v1)
	  │   └── C(v1)
	  │       └── D(v2)
	  └── E(v3)
		  └── D(v4)
	While an user tries to setup,
		s/he needs to know this 
			tree of dependencies and 
			the corresponding version dependencies
	
	Maven dependencies helps to 
		automate this
		we don't need to know the transitive dependencies
		transitive dependencies are automatically downloaded. 
	Maven understands our dependencies by reading pom.xml.
	Define only direct dependency in each project pom. 
	Maven handles the rest automatically.

	Sometimes duplicate libraries are possible.
	Maven provides few features to control extent of transitive dependencies.
	
	1 Dependency mediation
		Determines what version of dependency is to be used 
			when multiple versions of an artifact are encountered. 
		If two dependency versions are at the same depth in the dependency tree
			the first declared dependency will be used.

	2 Dependency management
		Directly specify the versions of artifacts to be used
		For e.g. 
			project C can include B as a dependency in its dependency Management section 
			directly control which version of B is to be used when it is ever referenced.

	3 Dependency scope
		Includes dependencies as per the current stage of the build.

	4 Excluded dependencies
		Any transitive dependency can be excluded using "exclusion" element. 
		As example, A depends upon B and B depends upon C, then A can mark C as excluded.

	5 Optional dependencies
		Any transitive dependency can be marked as optional using "optional" element. 
		As example, 
			A depends upon B and B depends upon C. 
			Now B marked C as optional. 
			Then A will not use C.
			
	
	Dependency Scope
Transitive Dependencies Discovery 
	can be restricted using various Dependency Scope as mentioned below.

1 compile
	dependency is available in classpath of project. 
	It is default scope.

2 provided
	dependency is to be provided by JDK or web-Server/Container at runtime.

3 runtime
	dependency is not required for compilation
	but is required during execution.

4 test
	dependency is required/available for the test compilation and execution phases.

5 system
	This scope indicates that you have to provide the system path.

6 import
	used when dependency is of type pom. - Refer multi module section
	This scope indicates that the specified POM should be replaced with the dependencies in that POM's <dependencyManagement> section.
	
	
	Refer https://www.tutorialspoint.com/maven/maven_manage_dependencies.htm for an example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Maven Properties
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Refer 3.4. Properties in
	https://www.baeldung.com/maven
	D:\PraiseTheLord\HSBGInfotech\Others\vilas\devops\maven\2-properties\pom.xml
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Maven Modules
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.baeldung.com/maven-multi-module
	A multi-module project 
		built from an aggregator POM 
		manages a group of submodules. 
		Preferably 
			aggregator pom.xml is located in the project's root directory 
			must have packaging of type pom.
			submodules 
				regular Maven projects
				they can be built separately 
				or through the aggregator POM.
				
	Advantages of Using Multi-Modules
	---------------------------------
	Reduce duplication.
	Easy Management
		In a microservices application
			consists of several modules/microservices
			some dependent and some independent.
			dependent microservices may have to be build and managed together
			We probably have to write scripts to manage this.
				Complexity
					Managing those scripts 
					Number of microservices increases
					Microserices may have common 
						Maven plugins 
						dependencies 
						profiles etc.
	Multi-module help
		build our application's modules in a single command 
		Manage order of building
		
		
	Parent POM/Super POM already covered and effective POM
	------------------------------------------------------
	Already covered
	
Hence, we can create our own pom.xml file which will serve us as the parent project. Then, we can include there all configuration with dependencies and set this as the parent of our child modules, so they'll inherit from it.

Besides the inheritance, Maven provides the notion of the aggregation. Parent POM that leverages this functionality is called an aggregate POM. Basically, this kind of POM declares its modules explicitly in its pom.xml file.

Lab: Reference: https://www.baeldung.com/maven-multi-module

1 
	First, let's create a parent project:

		mvn archetype:generate -DgroupId=org.vilascompany -DartifactId=parent-project

	Once the parent is generated
		change the packaging to pom in pom.xml file located in the parent's directory.
			<packaging>pom</packaging>


	By setting packaging to pom type, 
		we're declaring that project will serve as a parent or an aggregator – 
		it won't produce further artifacts.

	N.B: Parent is where the following are located 
		all shared configuration  
			eventually re-used in child modules. 
		shared dependencyManagement or 
		shared pluginManagement.

2. Creating Submodules
	Get inside the parent-project
		sub modules shoud in folders inside the parent.

		cd parent-project

		mvn archetype:generate -DgroupId=org.vilascompany  -DartifactId=core
		mvn archetype:generate -DgroupId=org.vilascompany  -DartifactId=service
		mvn archetype:generate -DgroupId=org.vilascompany  -DartifactId=webapp

	N.B: Command used to generate the parent and sub modules are same.
	Packaging - pom is what differentiates them until now.

	Modify parent's pom.xml file by adding some tags:
	(Do this only after the above modules are created. Mostly it should automatically added)
		<modules>
			<module>core</module>
			<module>service</module>
			<module>webapp</module>
		</modules>

	Now
		our parent explicitly declares aggregated modules.
		while running mvn package command in the parent project directory, 
			Maven will build and test all three modules.
		Maven Reactor will analyze our project and build it in proper order. 
			So, if our webapp module depends on the service module
				Maven will build first the service, then the webapp.
					We don't need to declare/configure this.
	
	If we wish to share all the configuration with our submodules
		then update the parent in the submodules
		Update the submodules pom.xml files:

	<parent>
		<groupId>org.vilascompany</groupId>
		<artifactId>parent-project</artifactId>
		<version>1.0-SNAPSHOT</version>
	</parent>
	
	Maven pom.xml can have only one parent.
	However, we can import many BOMs (refer below). 

3. Building the Project
	In the parent's project directory, run:
		mvn package


The Reactor lists the parent-project, but as it's pom type it's excluded and the build results in three separate .jar files for all other modules. In that case, build occurs in three of them.


BOM (Bill of Material)
	Any Pom file with a dependencyManagement section.
	Refer: https://www.baeldung.com/spring-maven-bom

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Maven Profile
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		https://www.baeldung.com/maven-profiles
		https://www.tutorialspoint.com/maven/maven_build_profiles.htm
		
	A Build profile 
		Set of configuration values
		Can be used to set or override default values of Maven build. 
		Using a build profile
			customize build for different environments 
				Production 
				Development .

	Profiles are specified in pom.xml file 
		using its activeProfiles/profiles elements 
		Can be triggered in variety of ways. 
	
	Types of Build Profile
	----------------------
	Build profiles are majorly of three types.
		Per Project	
			Defined in the project POM file, pom.xml
		Per User	
			Defined in Maven settings xml file (%USER_HOME%/.m2/settings.xml)
		Global	
			Defined in Maven global settings xml file (%M2_HOME%/conf/settings.xml)
	
	Profile Activation
	------------------
	A Maven Build Profile can be activated in various ways.
		Explicitly using command console input.
		Through maven settings.
		Based on environment variables (User/System variables).
		OS Settings (for example, Windows family).
		Present/missing files.
		Profile Activation Examples

	https://www.baeldung.com/maven-profiles
	https://mkyong.com/maven/maven-profiles-example/

Add below in pom.xml
------------------
<profiles>
	<profile>
	    <id>no-tests</id>
	    <properties>
	        <maven.test.skip>true</maven.test.skip>
	    </properties>
	</profile>
</profiles>
------------------


		
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	o Create a Maven Spring Boot project in Eclipse
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Already covered.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Run my unit tests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	mvn test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Jenkins integration with git 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	To be done with Jenkins
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Difference between ant, maven and Gradle
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.baeldung.com/ant-maven-gradle
	https://medium.com/@257ramanrb/ant-vs-maven-vs-gradle-cd8ab4c2735f
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Shell Scripting course Overview – 3.5 days
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://www.youtube.com/watch?v=9ckXibjManw
https://www.youtube.com/watch?v=YHFzr-akOas&list=PLS1QulWo1RIb9WVQGJ_vh-RQusbZgO_As
https://www.youtube.com/watch?v=RNkHjk01BOQ&list=PLxzKY3wu0_FKMVokhGVNJAJwMAqMcGfr_
https://www.youtube.com/watch?v=g_r6zjaTbQc&list=PLie35GAskAJkWshMAW9G0CNW28JQKZFVB
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	o Linux Basics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Linux
	free, 
	open-source 
		operating system.

	Under active development since 1991. 
	used in web servers to cellphones everywhere.

The Terminal
	Love terminals
	Administrative tasks can be accomplished through the terminal. 
	The terminal is interactive. 
	Execute a command
		The terminal outputs the results of those commands. 
	Executing any command is done by typing it and pressing Enter.

Linux 
	an operating system or 
	a kernel 
	
	Initiated by Linus Torvalds 
		a computer science student. 
		He used to work on the UNIX OS (proprietary software) 
		thought that it needed improvements.
		His suggestions were rejected by the designers of UNIX
		launched an OS 
			receptive to changes
			modifications suggested by its users.


The Lone Kernel & the early days
	Linus devised a Kernel named Linux in 1991. 
		File Manager, Document Editors, Audio -Video were yet to be added.
	Collaborated with other programmers in places like MIT 
		applications for Linux started to appear. 
	So around 1991
		a working Linux operating system with some applications was officially launched
		
	not very user-friendly 
	Used by computer programmers 
	Linus Torvalds never had it in mind to commercialize his product.
	open-source aspect of the Linux operating system made it more robust.

Linux gets its due attention
----------------------------

The main advantage of Linux 
	programmers were able to use the Linux Kernel 
		to design their own custom operating systems. 
	With time, a new range of user-friendly OS's stormed the computer world. 
	Now, Linux is one of the most popular and widely used Kernel
		backbone of popular operating systems like Debian, Knoppix, Ubuntu, and Fedora. 
		1000's of OS's around the world.
	Linux Kernel is normally used in combination of GNU project by Dr. Richard Stallman. 
	All mordern distributions of Linux are actually distributions of Linux/GNU

Adv
---
	Free kernel
	Open-source
		anyone with programming knowledge can modify it.
	Easy to learn Linux for beginners
	Millions of programs/applications to choose from
		most of them are free!
	No need for an antivirus! 
	Highly secure system. 
	Global development community constantly looking at ways to enhance its security. 
	OS of choice for Server environments 
		due to its stability and reliability 
		(Mega-companies like Amazon, Facebook, and Google use Linux for their Servers). 
		A Linux based server could run non-stop without a reboot for years on end.


What is a Linux Distribution?
To prevent hacking attempts
	many organizations keep their Linux operating systems private.
	Many others make their variations of Linux available publicly so 
		the whole world can benefit at large.
	These versions/ types /kinds of Linux operating system are called Distributions.

	Hundreds of Linux operating systems or Distributions available these days. 
	Many of them are designed with a specific purpose in mind. 
		For example, 
			to run a web server 
			to run on network switches like routers, modems, etc.
		The latest example of Linux Distribution is Android!

	Many of these Distributions are built to offer excellent personal computing.

How to Install Linux
Options
	Installing Linux using USB stick
	Installing Linux CD.
	Installing Linux from Virtual Machine
	
Further reads: https://tldp.org/LDP/intro-linux/html/intro-linux.html


Refer Image: https://developer.ibm.com/technologies/linux/articles/l-linux-kernel/
Linux kernel
	kernel is layered into a number of distinct subsystems. 
	Considered monolithic because 
	lumps all of the basic services into the kernel. 
	This differs from a microkernel architecture 
		where the kernel provides basic services such as 
			communication, 
			I/O
			memory 
			process management
			
			
	Kernel manages:
		File Management
		Multi-tasking
		Memory Management
		Input/Output Management
		Process Management
		Device Management
		Networking	
			
			
Major subsystems of the Linux kernel
	Now let’s look at some of the major components of the Linux kernel using the breakdown shown in Figure 3 as a guide. https://developer.ibm.com/technologies/linux/articles/l-linux-kernel/

What is a kernel?

As shown in Figure 3
	A resource manager. 
	Manages 
		process, 
		memory
		hardware device
	kernel manages and arbitrates 
		access to the resource 
			between multiple competing users 
			(both in the kernel and in user space).
	Interface between user space and hardware


Figure 3. One architectural perspective of the Linux kernel
	System call interface (SCI)
	---------------------------
	Thin layer 
	Interface between for function calls from user space into the kernel. 
	Can be architecture dependent
		even within the same processor family. 
	function-call multiplexing and demultiplexing service. 
	
Process management
	focused on the execution of processes. 
		called threads 
		represent an individual virtualization of the processor 
			(thread code
			data
			stack
			CPU registers). 
	User space: we call it as process
	The kernel provides 
		application program interface (API) 
		through the SCI to create a new process 
			(fork, exec or Portable Operating System Interface [POSIX] functions)
			stop a process (kill, exit)
			and 
			communicate and synchronize between them (signal, or POSIX mechanisms).

	Also in process management is the need to share the CPU between the active threads. 
	The kernel implements a novel scheduling algorithm that operates in constant time, regardless of the number of threads vying for the CPU. This is called the O(1) scheduler, denoting that the same amount of time is taken to schedule one thread as it is to schedule many. The O(1) scheduler also supports multiple processors (called Symmetric MultiProcessing, or SMP). You can find the process management sources in ./linux/kernel and architecture-dependent sources in ./linux/arch).
	
Memory management
	Another important resource that’s managed by the kernel is memory. For efficiency, given the way that the hardware manages virtual memory, memory is managed in what are called pages (4KB in size for most architectures). Linux includes the means to manage the available memory, as well as the hardware mechanisms for physical and virtual mappings.

	But memory management is much more than managing 4KB buffers. Linux provides abstractions over 4KB buffers, such as the slab allocator. This memory management scheme uses 4KB buffers as its base, but then allocates structures from within, keeping track of which pages are full, partially used, and empty. This allows the scheme to dynamically grow and shrink based on the needs of the greater system.

	Supporting multiple users of memory, there are times when the available memory can be exhausted. For this reason, pages can be moved out of memory and onto the disk. This process is called swapping because the pages are swapped from memory onto the hard disk. You can find the memory management sources in ./linux/mm.

Virtual file system
	The virtual file system (VFS) is an interesting aspect of the Linux kernel because it provides a common interface abstraction for file systems. The VFS provides a switching layer between the SCI and the file systems supported by the kernel (see Figure 4).
	At the top of the VFS is a common API abstraction of functions such as open, close, read, and write. At the bottom of the VFS are the file system abstractions that define how the upper-layer functions are implemented. These are plug-ins for the given file system (of which over 50 exist). You can find the file system sources in ./linux/fs.

	Below the file system layer is the buffer cache, which provides a common set of functions to the file system layer (independent of any particular file system). This caching layer optimizes access to the physical devices by keeping data around for a short time (or speculatively read ahead so that the data is available when needed). Below the buffer cache are the device drivers, which implement the interface for the particular physical device.


Network stack
	The network stack, by design, follows a layered architecture modeled after the protocols themselves. Recall that the Internet Protocol (IP) is the core network layer protocol that sits below the transport protocol (most commonly the Transmission Control Protocol, or TCP). Above TCP is the sockets layer, which is invoked through the SCI.

	The sockets layer is the standard API to the networking subsystem and provides a user interface to a variety of networking protocols. From raw frame access to IP protocol data units (PDUs) and up to TCP and the User Datagram Protocol (UDP), the sockets layer provides a standardized way to manage connections and move data between endpoints. You can find the networking sources in the kernel at ./linux/net.	
	
Device drivers
	The vast majority of the source code in the Linux kernel exists in device drivers that make a particular hardware device usable. The Linux source tree provides a drivers subdirectory that is further divided by the various devices that are supported, such as Bluetooth, I2C, serial, and so on. You can find the device driver sources in ./linux/drivers.	
	
Architecture-dependent code
	While much of Linux is independent of the architecture on which it runs, there are elements that must consider the architecture for normal operation and for efficiency. The ./linux/arch subdirectory defines the architecture-dependent portion of the kernel source contained in a number of subdirectories that are specific to the architecture (collectively forming the BSP). For a typical desktop, the i386 directory is used. Each architecture subdirectory contains a number of other subdirectories that focus on a particular aspect of the kernel, such as boot, kernel, memory management, and others. You can find the architecture-dependent code in ./linux/arch.

Interesting features of the Linux kernel
	If the portability and efficiency of the Linux kernel weren’t enough, it provides some other features that could not be classified in the previous decomposition.

	Linux, being a production operating system and open source, is a great test bed for new protocols and advancements of those protocols. Linux supports a large number of networking protocols, including the typical TCP/IP, and also extension for high-speed networking (greater than 1 Gigabit Ethernet [GbE] and 10 GbE). Linux also supports protocols such as the Stream Control Transmission Protocol (SCTP), which provides many advanced features above TCP (as a replacement transport level protocol).

	Linux is also a dynamic kernel, supporting the addition and removal of software components on the fly. These are called dynamically loadable kernel modules, and they can be inserted at boot when they’re needed (when a particular device is found requiring the module) or at any time by the user.

	A recent advancement of Linux is its use as an operating system for other operating systems (called a hypervisor). Recently, a modification to the kernel was made called the Kernel-based Virtual Machine (KVM). This modification enabled a new interface to user space that allows other operating systems to run above the KVM-enabled kernel. In addition to running another instance of Linux, Microsoft® Windows® can also be virtualized. The only constraint is that the underlying processor must support the new virtualization instructions.



What is Linux Shell?
	Provides user program/environment for user interaction.
	Command language interpretor which read from standard input.
	Gets started when we login or start the terminal.
	Shell is not a part of Kernel, but uses Kernel to execute programs.

Different Shells:
	SH (Bourne Shell) : It is the most basic shell. It is OpenSource.
	BASH (Bourne Again Shell) : It is the most common shell. It is OpenSource.
	CSH (C Shell) : It's syntax and usage is similar to C.
	KSH (K Shell) : It is the base for POSIX shell apps.
	TCHS : It's the enhanced and compatible version of CSH.

CLI shortcuts
-------------
	Ctrl + L : Clear the Screen
	Ctrl + W : Delete word starting at cursor
	Ctrl + U : Clear the line
	Ctrl + R : Search through previous run command
	Ctrl + C : Cancel current running command
	Ctrl + T : Swap last two character before cursor
	Esc + T : Swap last two word before cursor
	Ctrl + H : Delete letter starting at cursor


Getting Help in Linux
---------------------
	man COMMAND
	info COMMAND
	help COMMAND
	COMMAND -h
	COMMAND --help

Unix Philosophy

Philosophical approach to software development based on experience 
-----------------------------------------------------------------
	Do one thing + Do it well.
	Everything is in a file.
	Small is beautiful.
	Store data + configuration in flat text file.
	Use Shell Script to increase portablity.
	Chain programs to increase levrage and portablity.
	Portablity over efficiency.
	Keep it simple + stupid (KISS)
	Switching to login terminal -> Ctrl + Alt +F1

What is Shell Script?
---------------------

	Shell script can be defined as a series of commands stored in a plain text file.
	Similar to batch file, but is much more powerful.
	Fundamental part of Unix and Linux environment.
	Shell script consists of:
	Shell Keywords (if, else, do..while)
	Shell Commands (pwd, test, echo)
	Linux Binary Command (w, who, free)
	Text Processing Utility (grep, awk, sed, cut)
	Functions
	Control Flow (if..then..else, loops)
	Shell script purpose:
	Specific purpose
	Act as command
	Script code usablity


Advantages of Shell Script
--------------------------
	Easy to use
	Interactive debugging + quick start
	Time saving
	Task automation
	Execute w/o additional effort


Writing First Script

To create a shell script :
	Use a text editor to create a shell script.
	Save and close the Script file.
	Make the script executable.
	Run and test the script.
	Create a file hello.sh

#!/bin/bash
echo "Hello Kshitiz!"
echo "Testing Shell Script, if working."
echo "YoHoo, successfully created first Shell Script."


Further on shell scripting
https://github.com/kshitizsaini113/shell-scripting/tree/master/002_Shell_Variables

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Linux Directory Structure
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.tecmint.com/linux-directory-structure-and-important-files-paths-explained/
	https://www.thegeekstuff.com/2010/09/linux-file-system-structure/
	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Linux Basic Commands
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Command Line Interface
-----------------------
Command Line Interface (CLI) 
	allows us interact with computer using text commands

For example: 
	the cd command 
		In GUI

Shell and Terminal are sometimes interchangeably used to mean the same thing - 
	a prompt where user types and executes commands. 
	However, they are quite different
		
Shell 
	command line interpreter
	sets the syntax rules for invoking commands, etc
Terminal 
	text input/output environment
	responsible for visual details like font size, color, etc


		$ cat /etc/shells
		# /etc/shells: valid login shells
		/bin/sh
		/bin/dash
		/bin/bash
		/bin/rbash
		/bin/tcsh
		/usr/bin/tcsh

		$ echo "$SHELL"
		/bin/bash



Command Help
	Most distros 
		come with documentation for commands already installed. 
		Get used to reading manual from terminal 
		

man command 
	an interface to reference manuals
	usually displayed using less command
		press 
			q key to quit the man page 
			h key to get help
for Linux commands
	the info command gives the complete documentation
	you could also read them online
	e.g.
		man man will give details about the man command itself
		man bash will give you the manual page for bash
---------------------------------------------------------------------		
		man find | gvim - to open the manual page in your favorite text editor
what was this?
---------------------------------------------------------------------
		man -k printf will search the short descriptions in all the manual pages for the string printf
		-k here is a command option
		man -k is equivalent for apropos command

	Excellent resource 
		unix.stackexchange: 
			How do I use man pages to learn how to use commands?
		wiki.archlinux: 
			man page
		
	type will display information about command type
	typically used to get path of command or expand alias/function
	See 
		unix.stackexchange: What is the difference between a builtin command and one that is not?
		unix.stackexchange: Why not use “which”? What to use then?
	
	$ type cd
	cd is a shell builtin
	$ type sed
	sed is /bin/sed

	$ multiple commands can be given as arguments
	$ type pwd awk
	pwd is a shell builtin
	awk is /usr/bin/awk

	$ type ls
	ls is aliased to `ls --color=auto'
	$ type -a ls
	ls is aliased to `ls --color=auto'
	ls is /bin/ls
	help command provides documentation for builtin commands
	help help help page on help command
	-m option will display usage in pseudo-manpage format
	-d option gives short description for each topic, similar to whatis command
	help command by itself without any argument displays all shell commands that are defined internally
	$ help pwd
	pwd: pwd [-LP]
		Print the name of the current working directory.
		
		Options:
		  -L	print the value of $PWD if it names the current working directory
		  -P	print the physical directory, without any symbolic links
		
		By default, `pwd' behaves as if `-L' were specified.
		
		Exit Status:
		Returns 0 unless an invalid option is given or the current directory
		cannot be read.

	$ help -d compgen
		compgen - Display possible completions depending on the options.

	Here's some more companion commands
		whatis displays one-line manual page descriptions
		whereis locates the binary, source, and manual page files for a command
		explainshell is a web app that shows the help text that matches each argument of command line
		example: tar xzvf archive.tar.gz
		ch is a script, inspired by explainshell, to extract option descriptions from man/help pages
	$ whatis grep
	grep (1)             - print lines matching a pattern

	$ whereis awk
	awk: /usr/bin/awk /usr/share/awk /usr/share/man/man1/awk.1.gz

	$ ch sort -k
		   sort - sort lines of text files

		   -k, --key=KEYDEF
				  sort via a key; KEYDEF gives location and type


Examples given below are for demonstration purposes only, more detail in later chapters


	Command Structure
		only the command

	clear 
		clear the terminal screen
	top 
		display Linux processes

ls -l 
	list directory contents, use a long listing format
df -h 
	report file system disk space usage, 
		print sizes in human readable format (e.g., 1K 234M 2G)

mkdir project 
	create directory named 'project' in current working directory
man sort 
	manual page for sort command
wget https://s.ntnu.no/bashguide.pdf 
	download file from internet
command 
	with options and arguments

rm -r 
	project remove 'project' directory
paste -sd, ip.txt combine all lines from 'ip.txt' file to single line using , as delimiter
single quotes vs double quotes

single quotes preserves the literal value of each character within the quotes
double quotes preserves the literal value of all characters within the quotes, with the exception of '$', '`', '\', and, when history expansion is enabled, '!'
See also stackoverflow: Difference between single and double quotes
$ echo '$SHELL'
$SHELL

$ echo "$SHELL"
/bin/bash

Command Network
Redirecting output of a command

to another command
du -sh * | sort -h 
	calculate size of files/folders, 
	display size in human-readable format which is then sorted
	to a file (instead of displaying on terminal)

grep 'pass' *.log > pass_list.txt writes to file 
	check for the presence of 'pass' in all log files.
	(if file already exists, it is overwritten)
	
grep 'error' *.log >> errors.txt 
	(creates new file if necessary)
	appends to file  

p=$(pwd) saves the output of pwd command in variable p, there should be no spaces around =
Redirecting input

wc -l < file.txt 
	wc -l: line count.
	useful to get just the number of lines, without displaying file name
	tr 'a-z' 'A-Z' < ip.txt some commands like tr only work on stdin
	Redirecting error

-------------------------------------------------------------------


xyz 2> cmderror.log 
	assuming a non-existent command xyz
	it would give an error and gets redirected to specified file
Redirecting output of command as input file

comm -23 <(sort file1.txt) <(sort file2.txt) process substitution, avoids need to create temporary files
Combining output of several commands

(head -n5 ~/.vimrc ; tail -n5 ~/.vimrc) > vimrc_snippet.txt 
	multiple commands (separated by ;) can be grouped inside a list
	Command substitution

sed -i "s|^|$(basename $PWD)/|" dir_list.txt add current directory path and forward-slash character at the start of every line
Note the use of double quotes
stdin, stdout and stderr

	SED can be used in many different ways, such as:
		(Convert string from one form to the other)
		Text substitution,
		Selective printing of text files,
		In-a-place editing of text files,
		Non-interactive editing of text files, and many more.
	3 sections of sed.
		Read: 
			SED reads a line from the input stream (file, pipe, or stdin) and stores it in its internal buffer called pattern buffer.

		Execute: 
			All SED commands are applied sequentially on the pattern buffer. By default, SED commands are applied on all lines (globally) unless line addressing is specified.

		Display: 
			Send the (modified) contents to the output stream. After sending the data, the pattern buffer will be empty.

	The above process repeats until the file is done.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Copy, Remove, Move and Time Commands
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Copying Files
-------------
	copy of a file
	cp [OPTION] Source Destination
		[OPTION] is optional
	cp [OPTION] Source Directory
	cp [OPTION] Source-1 Source-2 Source-3 Source-n Directory	

1. 		
	cp source destination
		source?
			should be already present
		destination?
			mandatory
	You could unintentionally destroy another file with the cp command. 
	The cp command 
		generates a copy by first creating a file 
		then copying data into it. 
		If destination file already exists
			that file is destroyed 
			a new file with that name is created. 
		
		By default, Red Hat configures your system to check for an existing copy by the same name (cp aliases with the -i option, see Chapter 9). 
		To copy a file from your working directory to another directory
			you only need to use that directory name as destination 
	In the next example
		The proposal file already exists.
		the proposal file is overwritten by the newprop file. 

	$ cp newprop proposal

2. 
	wild character * 
		*.c 

	Copy all files ending with .c
		$ cp *.c sourcebks
		
	Copy all files inside props directory		
		$ cp props/* oldprop
	Other wild chacters 
		., ?, or []. 
	
	Copy all (.c and .o) to the projbk directory:

		$ cp *.[oc] projbk
	
	Copy a file to the destination directory with a name. 
	To do so, place the new filename after the directory name, separated by a slash.

		$ cp filename directory-name/new-filename	
	
Continue from https://www.geeksforgeeks.org/cp-command-linux-examples/	

3. 
	cp [OPTION] Source-1 Source-2 Source-3 Source-n Directory	
	Source-1 Source-2 Source-3 should all be files.
	Directory - should be a valid directory. 
	
4. Copy a directory
	cp -R sourceDirectory destinationDirectory
	destinationDirectory 
		if not present, then it will be created
	sourceDirectory will be a sub folder in destination.

	
5. cp -i # i - interactive
		cp -i a.txt. b.txt
		This option will warn us before overwritting the files 
		N.B: For some distributions like RedHat probably this is the default implementation.

6.  -b(backup): 
		creates the backup of the destination file 
			in the same folder 
			with the different name and in different format.

		$ ls
		a.txt  b.txt

		$ cp -b a.txt b.txt

		$ ls
		a.txt  b.txt  b.txt~
		
		
7. 	 -f(force): If the system is unable to open destination file for writing operation because the user doesn’t have writing permission for this file then by using -f option with cp command, destination file is deleted first and then copying of content is done from source to destination file.

	$ ls -l b.txt
	-r-xr-xr-x+ 1 User User 3 Nov 24 08:45 b.txt

	User, group and others doesn't have writing permission.

	Without -f option, command not executed
	$ cp a.txt b.txt
	cp: cannot create regular file 'b.txt': Permission denied

	With -f option, command executed successfully
	$ cp -f a.txt b.txt	


8. -r or -R: Copying directory structure. With this option cp command shows its recursive behavior by copying the entire directory structure recursively.
Suppose we want to copy geeksforgeeks directory containing many files, directories into gfg directory(not exist).

	$ ls geeksforgeeks/
	a.txt  b.txt  b.txt~  Folder1  Folder2

	Without -r option, error
	$ cp geeksforgeeks gfg
	cp: -r not specified; omitting directory 'geeksforgeeks'

	With -r, execute successfully
	$ cp -r geeksforgeeks gfg

	$ ls gfg/
	a.txt  b.txt  b.txt~  Folder1  Folder2

9. -p(preserve): With -p option cp preserves the following characteristics of each source file in the corresponding destination file: the time of the last data modification and the time of the last access, the ownership (only if it has permissions to do this), and the file permission-bits.
Note: For the preservation of characteristics you must be the root user of the system, otherwise characteristics changes.

	$ ls -l a.txt
	-rwxr-xr-x+ 1 User User 3 Nov 24 08:13 a.txt

	$ cp -p a.txt c.txt

	$ ls -l c.txt
	-rwxr-xr-x+ 1 User User 3 Nov 24 08:13 c.txt
	As we can see above both a.txt and c.txt(created by copying) have same characteristics.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Remove
------
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rm 
	stands for remove here. 
	remove objects such as 
		files, 
		directories, 
		symbolic links 
	To be more precise, 
		rm removes references to objects from the filesystem
		where those objects might have had multiple references 
			(for example, a file with two different names). 
	By default, it does not remove directories.
	Works silently - so be very careful.

Syntax:

rm [OPTION]... FILE...
Let us consider 5 files having name a.txt, b.txt and so on till e.txt.
1. 
	touch file{1..5}
	$ ls
	a.txt  b.txt  c.txt  d.txt  e.txt
	
	Removing one file at a time
	$ rm a.txt

	$ ls
	b.txt  c.txt  d.txt  e.txt

2. 	Removing more than one file at a time
	$ rm b.txt c.txt

	$ ls
	d.txt  e.txt
	Note: No output is produced by rm
			messages generated only in the case of an error.

3. 
Options:
	-i (Interactive Deletion): Like in cp, the -i option makes the command ask the user for confirmation before removing each file, you have to press y for confirm deletion, any other key leaves the file un-deleted.

		$ rm -i d.txt
		rm: remove regular empty file 'd.txt'? y

		$ ls
		e.txt

4. -f (Force Deletion): rm prompts for confirmation removal if a file is write protected. The -f option overrides this minor protection and removes the file forcefully.

		$ ls -l
		total 0
		-r--r--r--+ 1 User User 0 Jan  2 22:56 e.txt

		$ rm e.txt
		rm: remove write-protected regular empty file 'e.txt'? n

		$ ls
		e.txt

		$ rm -f e.txt

		$ ls


		Note: -f option of rm command will not work for write-protect directories.

5. -r (Recursive Deletion): With -r(or -R) option rm command performs a tree-walk and will delete all the files and sub-directories recursively of the parent directory. At each stage it deletes everything it finds. Normally, rm wouldn’t delete the directories but when used with this option, it will delete.

Below is the tree of directories and files:

		$ ls
		A

		$ cd A

		$ ls
		B  C

		$ ls B
		a.txt  b.txt

		$ ls C
		c.txt  d.txt

		Now, deletion from A directory(as parent directory) will be done as:

		$ rm *
		rm: cannot remove 'B': Is a directory
		rm: cannot remove 'C': Is a directory

		$ rm -r *

		$ ls

		Every directory and file inside A directory is deleted.

6. –version: This option is used to display the version of rm which is currently running on your system.

		$ rm --version
		rm (GNU coreutils) 8.26
		Packaged by Cygwin (8.26-2)
		Copyright (C) 2016 Free Software Foundation, Inc.
		License GPLv3+: GNU GPL version 3 or later .
		This is free software: you are free to change and redistribute it.
		There is NO WARRANTY, to the extent permitted by law.





~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Move
----
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mv command in Linux with examples
mv stands for move. 
	mv is used to move one or more files or directories from one place to another in a file system like UNIX. 
	It has two distinct functions: 
		(i) It renames a file or folder. 
		(ii) It moves a group of files to a different directory. 
	No additional space is consumed on a disk during renaming. This command normally works silently means no prompt for confirmation. 

Syntax: 

mv [Option] source destination
Let us consider 4 files having names 
	a.txt, 
	b.txt, 
	c.txt, 
	d.txt. 
To rename the file a.txt to geek.txt(not exist): 

		$ ls
		a.txt  b.txt  c.txt  d.txt

		$ mv a.txt geek.txt

		$ ls
		b.txt  c.txt  d.txt  geek.txt

If the destination file doesn’t exist, 
	it will be created. 
	In the above command mv simply replaces the source filename in the directory with the destination filename(new name). 
	If the destination file exist, then it will be overwrite and the source file will be deleted. 
	By default, mv doesn’t prompt for overwriting the existing file, So be careful !! 


		$ ls
		b.txt  c.txt  d.txt  geek.txt

		$ cat geek.txt
		India

		$ cat b.txt
		geeksforgeeks

		$ mv geek.txt b.txt

		$ ls
		b.txt  c.txt  d.txt

		$ cat b.txt
		India


Options: 
1. -i (Interactive): Like in cp, the -i option makes the command ask the user for confirmation before moving a file that would overwrite an existing file, you have to press y for confirm moving, any other key leaves the file as it is. This option doesn’t work if the file doesn’t exist, it simply rename it or move it to new location. 

		$ ls
		b.txt  c.txt  d.txt  geek.txt

		$ cat geek.txt
		India

		$ cat b.txt
		geeksforgeeks

		$ mv -i geek.txt b.txt
		mv: overwrite 'b.txt'? y

		$ ls
		b.txt  c.txt  d.txt

		$ cat b.txt
		India


2. -f (Force): mv prompts for confirmation overwriting the destination file if a file is write-protected. The -f option overrides this minor protection and overwrites the destination file forcefully and deletes the source file. 

		$ ls
		b.txt  c.txt  d.txt  geek.txt

		$ cat b.txt
		geeksforgeeks

		$ ls -l b.txt
		-r--r--r--+ 1 User User 13 Jan  9 13:37 b.txt

		$ mv geek.txt b.txt
		mv: replace 'b.txt', overriding mode 0444 (r--r--r--)? n

		$ ls
		b.txt  c.txt  d.txt  geek.txt

		$ mv -f geek.txt b.txt

		$ ls
		b.txt  c.txt  d.txt

		$ cat b.txt
		India


3. -n (no-clobber): With -n option, mv prevent an existing file from being overwritten. 
In the following example the effect is for nothing to happen as a file would be overwritten. 

		$ ls
		b.txt  c.txt  d.txt  geek.txt

		$ cat b.txt
		geeksforgeeks

		$ mv -n geek.txt b.txt

		$ ls
		b.txt  c.txt  d.txt  geek.txt

		$ cat b.txt
		geeksforgeeks


4. -b(backup): With this option, it is easier to take a backup of an existing file that will be overwritten as a result of the mv command. This will create a backup file with the tilde character(~) appended to it. 

		$ ls
		b.txt  c.txt  d.txt  geek.txt

		$ mv -b geek.txt b.txt

		$ ls
		b.txt  b.txt~  c.txt  d.txt


5. –version: This option is used to display the version of mv which is currently running on your system. 

$ mv --version
mv (GNU coreutils) 8.26
Packaged by Cygwin (8.26-2)
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later .
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Time
----
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	time command in Linux is used to 
		execute a command 
		prints a summary of 
			real-time, 
			user CPU time and 
			system CPU time 
				spent by executing a command when it terminates. 
	‘real‘ time 
		time elapsed wall clock time taken by a command to get executed
	‘user‘ and ‘ 
		number of CPU seconds that command uses in user.
	sys‘ time
		number of CPU seconds that command uses in kernel mode respectively.
	Synatx:
	time [option] [COMMAND]

	In the above example, sleep 3 is used to create a dummy job which lasts 3 seconds.

	Options:
	time -p : This option is used to print time in POSIX format
	
	POSIX : portable operating system interface, primarily for UNIX systems


	help time #get help with time
	
-----------------------------------------------------------------------------	
	Users of the bash shell need to use an explicit path in order to run
  the external time command and not the shell builtin variant.  On system
  where time is installed in /usr/bin, the first example would become
       /usr/bin/time wc /etc/hosts
	   
-----------------------------------------------------------------------------
		You can control time command output format using -f FORMAT as follows:
		$ /usr/bin/time -f 'FORMAT' -p command

		Use FORMAT as the format string that controls the output of time as follows:

		Fomat	Meaning
		 % 	A literal `%’.
		 C 	Name and command line arguments of the command being timed.
		 D 	Average size of the process’s unshared data area, in Kilobytes.
		 E 	Elapsed real (wall clock) time used by the process, in [hours:]minutes:seconds.
		 F 	Number of major, or I/O-requiring, page faults that occurred while the process was running. These are faults where the page has actually migrated out of primary memory.
		 I 	Number of file system inputs by the process.
		 K 	Average total (data+stack+text) memory use of the process, in Kilobytes.
		 M 	Maximum resident set size of the process during its lifetime, in Kilobytes.
		 O 	Number of file system outputs by the process.
		 P 	Percentage of the CPU that this job got. This is just user + system times divided by the total running time. It also prints a percentage sign.
		 R 	Number of minor, or recoverable, page faults. These are pages that are not valid (so they fault) but which have not yet been claimed by other virtual pages. Thus the data in the page is still valid but the system tables must be updated.
		 S 	Total number of CPU-seconds used by the system on behalf of the process (in kernel mode), in seconds.
		 U 	Total number of CPU-seconds that the process used directly (in user mode), in seconds.
		 W 	Number of times the process was swapped out of main memory.
		 X 	Average amount of shared text in the process, in Kilobytes.
		 Z 	System’s page size, in bytes. This is a per-system constant, but varies between systems.
		 c 	Number of times the process was context-switched involuntarily (because the time slice expired).
		 e 	Elapsed real (wall clock) time used by the process, in seconds.
		 k 	Number of signals delivered to the process.
		 p 	Average unshared stack size of the process, in Kilobytes.
		 r 	Number of socket messages received by the process.
		 s 	Number of socket messages sent by the process.
		 t 	Average resident set size of the process, in Kilobytes.
		 w 	Number of times that the program was context-switched voluntarily, for instance while waiting for an I/O operation to complete.
		 x 	Exit status of the command.

		In this example, show just the user, system, and total time using format option:
			$ /usr/bin/time -f "%E real,%U user,%S sys" sleep 2
			$ /usr/bin/time -f "%E real,%U user,%S sys" /path/to/script
	
	Why format is not working on CentOS?
	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Diff and Grep Commands
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	diff stands for difference. 
	This command is used to display the differences in the files by comparing the files line by line. Unlike its fellow members, cmp and comm, it tells us which lines in one file have is to be changed to make the two files identical.

	The important thing to remember is that diff uses certain special symbols and instructions that are required to make two files identical. It tells you the instructions on how to change the first file to make it match the second file.

	Special symbols are:

	a : add
	c : change
	d : delete
	Syntax :

	diff [options] File1 File2 

	
	$ ls
	a.txt  b.txt

	$ cat a.txt
		Gujarat
		Uttar Pradesh
		Kolkata
		Bihar
		Jammu and Kashmir

	$ cat b.txt
		Tamil Nadu
		Gujarat
		Andhra Pradesh
		Bihar
		Uttar pradesh


	$ diff a.txt b.txt
		0a1
		> Tamil Nadu
		2,3c3
		< Uttar Pradesh
		< Kolkata
		---
		> Andhra Pradesh
		5c5
		< Jammu and Kashmir
		---
		> Uttar pradesh



		Lines preceded by a < are lines from the first file.
		Lines preceded by > are lines from the second file.
		The three dashes (“—“) merely separate the lines of file 1 and file 2
------------------------------------------------------------------------------		
$ cat a.txt			|	$ cat b.txt    |
------------------------------------------------------------------------------
Gujarat             |    Tamil Nadu	   | 0a1 > Tamil Nadu. Add TN to file 1
Uttar Pradesh       |    Gujarat       | 2,3c3 < Add 2, 3 lines of file 1 (UP and K) to file 2
Kolkata             |    Andhra Pradesh|	Insert AP into file 1
Bihar               |    Bihar         | 
Jammu and Kashmir   |    Uttar pradesh | 5c5 - add J & K and UP to each other.




For more details refer https://www.geeksforgeeks.org/diff-command-linux-examples/


~~~~~~~~~~~~~~~~~
Grep
----
https://www.geeksforgeeks.org/grep-command-in-unixlinux/
grep [options] pattern [files]
 

Options Description
	-c : This prints only a count of the lines that match a pattern
	-h : Display the matched lines, but do not display the filenames.
	-i : Ignores, case for matching
	-l : Displays list of a filenames only.
	-n : Display the matched lines and their line numbers.
	-v : This prints out all the lines that do not matches the pattern
	-e exp : Specifies expression with this option. Can use multiple times.
	-f file : Takes patterns from file, one per line.
	-E : Treats pattern as an extended regular expression (ERE)
	-w : Match whole word
	-o : Print only the matched parts of a matching line,
	 with each such part on a separate output line.

	-A n : Prints searched line and nlines after the result.
	-B n : Prints searched line and n line before the result.
	-C n : Prints searched line and n lines after before the result.

----------------------------------------
vi geekfile.txt
	unix is great os. unix is opensource. unix is free os.
	learn operating system.
	Unix linux which one you choose.
	uNix is easy to learn.unix is a multiuser os.Learn unix .unix is a powerful.

:q!
----------------------------------------

1. Case insensitive search : 
	The -i option enables to search for a string case insensitively in the given file. 
	It matches the words like “UNIX”, “Unix”, “unix”. 
 

$grep -i "UNix" geekfile.txt
Output: 

	unix is great os. unix is opensource. unix is free os.
	Unix linux which one you choose.
	uNix is easy to learn.unix is a multiuser os.Learn unix .unix is a powerful.


2. Display the count of number of matches : 
We can find the number of lines that matches the given string/pattern 

	$grep -c "unix" geekfile.txt

Output: 
	2

3. Display the file names that matches the pattern : 
We can just display the files that contains the given string/pattern. 

	$grep -l "unix" *
or
	$grep -l "unix" f1.txt f2.txt f3.xt f4.txt

Output: 
	geekfile.txt


4. Checking for the whole words in a file : 
	By default, grep matches the given string/pattern even if it found as a substring in a file. 
	The -w option to grep makes it match only the whole words. 

	$ grep -w "unix" geekfile.txt
	Output: 
		unix is great os. unix is opensource. unix is free os.
		uNix is easy to learn.unix is a multiuser os.Learn unix .unix is a powerful.

5. Displaying only the matched pattern : 
	By default, grep displays the entire line which has the matched string. We can make the grep to display only the matched string by using the -o option. 
 
	$ grep -o "unix" geekfile.txt
	Output: 
		unix
		unix
		unix
		unix
		unix
		unix

6. Show line number while displaying the output using grep -n : To show the line number of file with the line matched. 
$ grep -n "unix" geekfile.txt
Output: 
	1:unix is great os. unix is opensource. unix is free os.
	4:uNix is easy to learn.unix is a multiuser os.Learn unix .unix is a powerful.
	7. Inverting the pattern match : You can display the lines that are not matched with the specified search sting pattern using the -v option. 
 

	$ grep -v "unix" geekfile.txt
	Output: 
		learn operating system.
		Unix linux which one you choose.

8. Matching the lines that start with a string : The ^ regular expression pattern specifies the start of a line. This can be used in grep to match the lines which start with the given string or pattern. 
	$ grep "^unix" geekfile.txt
	Output: 
		unix is great os. unix is opensource. unix is free os.

9. Matching the lines that end with a string : The $ regular expression pattern specifies the end of a line. This can be used in grep to match the lines which end with the given string or pattern. 
	$ grep "os$" geekfile.txt

10.Specifies expression with -e option. Can use multiple times : 
 

$grep –e "Agarwal" –e "Aggarwal" –e "Agrawal" geekfile.txt
11. -f file option Takes patterns from file, one per line. 
 

$cat pattern.txt

Agarwal
Aggarwal
Agrawal
 

$grep –f pattern.txt  geekfile.txt
12. Print n specific lines from a file:  
	-A prints the searched line and n lines after the result, 
	-B prints the searched line and n lines before the result
	-C prints the searched line and n lines after and before the result. 

Syntax:

$grep -A[NumberOfLines(n)] [search] [file]  

$grep -B[NumberOfLines(n)] [search] [file]  

$grep -C[NumberOfLines(n)] [search] [file]  
Example:

$grep -A1 learn geekfile.txt
Output:  

learn operating system.    
Unix linux which one you choose. 




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Head, tail, sort and more commands
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Head
	https://www.geeksforgeeks.org/head-command-linux-examples/
	
Hyderabad
Itanagar
Dispur
Patna
Raipur
Panaji
Gandhinagar
Chandigarh
Shimla
Srinagar
Trivandrum
Chennai
Bangalore
Mumbai
Culcutta	

Tail
	https://www.geeksforgeeks.org/tail-command-linux-examples/

	tail +n is not working
	
Sort
	https://www.geeksforgeeks.org/sort-command-linuxunix-examples/
	https://www.tecmint.com/linux-sort-command-examples/

More
	https://www.geeksforgeeks.org/more-command-in-linux-with-examples/
	
	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o tr and wc commands
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tr
	https://www.geeksforgeeks.org/tr-command-in-unix-linux-with-examples/
		echo "My name is Vilas" | tr [:space:] '\t'
		cat <file> | tr “[a-z]” “[A-Z]”
		cat <file> | tr “[:lower:]” “[:upper:]”
	
wc
	https://www.geeksforgeeks.org/wc-command-linux-examples/
	
		Enter key: to scroll down line by line.
		Space bar: To go to the next page.
		b key: To go to back one page.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Disk utilities like fdisk, df and du commands
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fdisk
	https://www.geeksforgeeks.org/fdisk-command-in-linux-with-examples/
	https://www.tecmint.com/fdisk-commands-to-manage-linux-disk-partitions/

	Heads, cylinders, sector, blocks 
		https://www.youtube.com/watch?v=oEORcCQ62nQ
		https://www.youtube.com/watch?v=Cj8-WNjaGuM
df
	https://www.geeksforgeeks.org/df-command-in-linux-with-examples/
du
	https://www.geeksforgeeks.org/du-command-linux-examples/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Getting Help From Command Line user Interface
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://vitux.com/get-help-on-linux-shell/
		
	Getting Help in Linux
	---------------------
		man COMMAND
		info COMMAND
		help COMMAND
		COMMAND -h
		COMMAND --help
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o w, who, hostname, hostnamectl and uname commands
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
w
	https://www.geeksforgeeks.org/w-command-in-linux-with-examples/
who
	https://www.geeksforgeeks.org/who-command-in-linux/
hostname
	https://www.geeksforgeeks.org/hostname-command-in-linux-with-examples/
hostnamectl
	https://www.geeksforgeeks.org/hostnamectl-command-in-linux-with-examples/
uname
	https://linuxize.com/post/uname-command-in-linux/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Search for files and directories using find and locate commands
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
find
	https://www.geeksforgeeks.org/find-command-in-linux-with-examples/
		why find exec has {} \;?
			refer https://unix.stackexchange.com/questions/389705/understanding-the-exec-option-of-find/389706
---------------------------------------------------------------------------------			
This answer comes in the following parts:

Basic usage of -exec
Using -exec in combination with sh -c
Using -exec ... {} +
Using -execdir
Basic usage of -exec
The -exec option takes an external utility with optional arguments as its argument and executes it.

If the string {} is present anywhere in the given command, each instance of it will be replaced by the pathname currently being processed (e.g. ./some/path/FILENAME). In most shells, the two characters {} does not need to be quoted.

The command needs to be terminated with a ; for find to know where it ends (as there may be further options afterwards). To protect the ; from the shell, it needs to be quoted as \; or ';', otherwise the shell will see it as the end of the find command.

Example (the \ at the end of the first two lines are just for line continuations):

find . -type f -name '*.txt'      \
   -exec grep -q 'hello' {} ';'   \
   -exec cat {} ';'
   
If COMMAND contains {}, then find substitutes the full path name of the selected file for "{}".   
   
This will find all regular files (-type f) whose names matches the pattern *.txt in or below the current directory. It will then test whether the string hello occurs in any of the found files using grep -q (which does not produce any output, just an exit status). For those files that contain the string, cat will be executed to output the contents of the file to the terminal.

Each -exec also acts like a "test" on the pathnames found by find, just like -type and -name does. If the command returns a zero exit status (signifying "success"), the next part of the find command is considered, otherwise the find command continues with the next pathname. This is used in the example above to find files that contain the string hello, but to ignore all other files.

The above example illustrates the two most common use cases of -exec:
locate
	https://www.geeksforgeeks.org/locate-command-in-linux-with-examples/
	https://www.tecmint.com/linux-locate-command-practical-examples/
---------------------------------------------------------------------------------
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o top command its output explanation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
top command
	https://www.geeksforgeeks.org/top-command-in-linux-with-examples/
explanation
	https://www.booleanworld.com/guide-linux-top-command/
	https://tecadmin.net/understanding-linux-top-command-results-uses/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o vi text editor
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Quick overview
		https://ryanstutorials.net/linuxtutorial/vi.php
	Detailed	
		https://www.tutorialspoint.com/unix/unix-vi-editor.htm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o sed, awk, vmstat and netsat commands
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
sed
	https://www.geeksforgeeks.org/sed-command-in-linux-unix-with-examples/
	sed advanced reference: https://www.tutorialspoint.com/sed/sed_basic_syntax.htm
-----------------------------
unix is great os. unix is opensource. unix is free os.
learn operating system.
unix linux which one you choose.
unix is easy to learn.unix is a multiuser os.Learn unix .unix is a powerful.	
-----------------------------
	
awk
	https://www.geeksforgeeks.org/awk-command-unixlinux-examples/
	1. AWK Operations: 
		(a) Scans a file line by line 
		(b) Splits each input line into fields 
		(c) Compares input line/fields to pattern 
		(d) Performs action(s) on matched lines 
vmstat
	https://www.redhat.com/sysadmin/linux-commands-vmstat
	https://phoenixnap.com/kb/vmstat-command
	
netstat
	sudo yum install net-tools 
	https://www.geeksforgeeks.org/netstat-command-linux/

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o vnstat command
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://www.geeksforgeeks.org/vnstat-command-in-linux-with-examples/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Introduction to Graphical user interface
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.geeksforgeeks.org/introduction-to-graphical-user-interface-of-redhat-linux-operating-system/
	https://www.youtube.com/watch?v=hoG4TFsobX4
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o cut command (Vertical copy paste with byte accuracy)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.geeksforgeeks.org/cut-command-linux-examples/
	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Merge multiple files using paste command
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.geeksforgeeks.org/paste-command-in-linux-with-examples/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Connect and Manage remote machine using SSH
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Lab reference: 
https://www.digitalocean.com/community/tutorials/ssh-essentials-working-with-ssh-servers-clients-and-keys

Reference for 
https://www.hostinger.in/tutorials/ssh-tutorial-how-does-ssh-work

Detailed reference: https://www.ssh.com/academy/ssh


	SSH: Secure shell
	A communication protocol
		like http, https, ftp etc.
	connect and work on remote machine like localhost
		manage and launch remote machine to do anything.
	Traffic is encrypted
	Mostly work on terminal/command line access
	
	
	Client/Server communication
		SSH is the client
		SSHD: server should have sshd
			for the client to connect using ssh


	Authentication Methods
		ssh vilas@<ip>
	Can authenticate using 
		password
		public/private key
			by password completly
			recommended
		host based.
	
	ssh may come pre-installed on linux	
		if you don't find it search online for your installation.
	Generating keys
		ssh-keygen
			private: ~/.ssh/id_rsa
			public: !/.ssh/id_rsa.pub 
			
	cat ~/.ssh/id_rsa.pub | ssh vilas@192.168.1.29 "mkdir -p ~/.ssh && chmod 700 ~/.ssh && cat >> ~/.ssh/authorized_keys	

		instead you can chmod 700 ~./ssh
		copy paste it into the machine ~/.ssh/authorized_keys
	https://gist.github.com/bradtraversy/f03df587f2323b50beb4250520089a9e
	
	
	Windows
		Windows 10 supports native ssh
		putty: used in older versions
		Git Bash & other terminal 
			include ssh
			
			
	                                                                                                                                                                                                     
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Changing files and directory permissions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

How to change directory permissions in Linux
To change directory permissions in Linux, use the following:

	chmod +rwx filename to add permissions.
	chmod -rwx directoryname to remove permissions.
	chmod +x filename to allow executable permissions.
	chmod -wx filename to take out write and executable permissions.

N.B: 
	“r” is for read, 
	“w” is for write
	“x” is for execute. 

This only changes the permissions for the owner of the file.

----------------------------------		
	First group: owner
	Second group: group
	Third group: other's
----------------------------------

How to Change Directory Permissions in Linux 
	for the Group Owners (add g)
		chmod g+w filename
		chmod g-wx filename

	for Others (add o)
		chmod o+w filename
		chmod o-rwx foldername


To change directory permissions for everyone use 
	“u” for users
	“g” for group
	“o” for others
	and “ugo” or “a” (for all).

	chmod ugo+rwx foldername to give read, write, and execute to everyone.
	chmod a=r foldername to give only read permission for everyone.


How to Change Ownership in Linux
Another helpful command is changing ownerships of files and directories in Linux:

	chown name filename
	chown name foldername

These commands will give ownership to someone, but all sub files and directories still belong to the original owner.

You can also combine the group and ownership command by using:

	chown -R name:filename /home/name/directoryname
	chown -R vagrant:file1

How to Change Permissions in Numeric Code in Linux
You may need to know how to change permissions in numeric code in Linux, so to do this you use numbers instead of “r”, “w”, or “x”.

	0 = No Permission
	1 = Execute
	2 = Write
	4 = Read
	Basically, you add up the numbers depending on the level of permission you want to give.

Permission numbers are:

	0 = ---
	1 = --x
	2 = -w-
	3 = -wx
	4 = r--
	5 = r-x
	6 = rw-
	7 = rwx

chmod 777 foldername 
	read, 
	write
	execute 
		permissions for everyone.
		
----------------------------------		
	First digit: owner
	Second digit: group
	Third digit: other's
----------------------------------
		
chmod 700 foldername 
	read, 
	write
	execute 
		permissions for the user only.
chmod 327 foldername 
	will give write and execute 	
	(3) permission for the owner, wx 
	(2) for the group, w
	(7) read, write, and execute for the others.

e.g. 
drwxr-xr-x means
	d: directory
		instead file : -
	owner has 
		all permission
	group has
		read and execute privilege
	others also has read and execute privilege

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o tar and zip commands
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tar	https://www.geeksforgeeks.org/tar-command-linux-examples/
	https://www.tecmint.com/18-tar-command-examples-in-linux/
	
zip
	https://www.geeksforgeeks.org/zip-command-in-linux-with-examples/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Scheduling future jobs using crontab
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.geeksforgeeks.org/crontab-in-linux-with-examples/
	To view your crontab entries type for current unix .
		crontab -l 
		
	To view crontab entries for other users
		crontab -u <username> -l 
		
	Edit Current Logged-In User’s Crontab entries.
		crontab -e. 	
		

	To schedule a job for every minute using Cron.
		* * * * * CMD

	The * means all the possible unit 
		— i.e every minute 
		
	*/5 in minute field 
		every 5 minutes.
	0-10/2 in minute field  
		every 2 minutes in the first 10 minute.
	
	Above convention can be used for all the other 4 fields.


	Schedule a job for more than one time (e.g. Twice a Day)
	--------------------------------------------------------

	Execute a job at 11:00 and 16:00 on every day. 

		00 11, 16 * * * /home/vilas/bin/incremental-backup
		00 – 0th Minute (Top of the hour)
		11, 16 – 11 AM and 4 PM
		* – Every day
		* – Every month
		* – Every day of the week

	Schedule a job for certain range of time (e.g. Only on Weekdays)
	--------------------------------------------------------
	Execute check-db status during 
		working hours 9 a.m – 6 p.m.
		on weekdays (mon-fri)
			00 09-18 * * 1-5 /home/vilas/bin/check-db-status
			00 – 0th Minute (Top of the hour)
			09-18 – 9 am, 10 am, 11 am, 12 am, 1 pm, 2 pm, 3 pm, 4 pm, 5 pm, 6 pm
			* – Every day
			* – Every month
			1-5 -Mon, Tue, Wed, Thu and Fri (Every Weekday)

Cron special keywords and its meaning
--------------------------------------------------------
	Keyword    Equivalent
	@yearly    0 0 1 1 *
	@daily     0 0 * * *
	@hourly    0 * * * *
	@reboot    Run at startup.
	8.To schedule a job for first minute of every year using @yearly
		@yearly cron keyword as shown below.

		@yearly /home/vilas/bin/annual-maintenance
		
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	
	o difference between scripting and programming
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.programmingeeks.com/scripting-vs-programming-languages/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o what is shell scripting and it's advantages
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	What is shell scripting 
		https://www.tutorialspoint.com/unix/shell_scripting.htm
	
		https://www.tutorialspoint.com/unix/unix-what-is-shell.htm
	
	Advantages:

		Automate frequently performed operations
		Run sequence of commands as a single command
		Easy to use
		Portable (It can be executed in any Unix-like operating systems without any modifications)
			as long as we have coded using SH/BASH

	Disadvantages:

		Slow execution speed compared to any programming languages
		A new process launched for almost every shell command executed
	
	
	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	o PATH environment variable
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.baeldung.com/linux/path-variable
		executables are always checked in PATH
		export PATH=$PATH:/some/new/path
		
		
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Symbols used shell scripting
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://tldp.org/LDP/abs/html/special-chars.html
	
Building blocks of scripts.	
	Commands and keywords
	special characters 

Comments. 
---------
	Lines beginning with a # 
	(Exception: #! - Shebang) 
	comments and will not be executed.

	# This line is a comment.

	May be appended towards the end of a command.

	echo "A comment will follow." # Comment here.
	#                            ^ Note whitespace before #

	Comments may also follow whitespace at the beginning of a line.

		 # A tab precedes this comment.
	Comments may even be embedded within a pipe.


	Unix shell program
		interprets user commands
			either 
				entered by user
				from a shell file
		interpretted
			not compiled
		
	Bash shell
	----------
	Control + Alt + T : shortcut to terminal
	File system?
		In linux everything is in filesystem
		Follows hierarchichal filesystem
		Tree like structure
		/: root directory
		pwd : present working directory
		ls: list directory
			ls: ls .
			ls <directory name>
				<drectory name> can be relative or absolute
			ls -l: long format
				permissions, user, size, updated date and time.
			ls -a
				show hidden files also
			ls -lS
				sort by size in descending order
			ls *.html
				all html file
			ls -ltr > abc.txt
				save the content to a file
				command on the left can be any command.
				abc.txt will be created.
				> insert data
					existing data will not be retained.
				>> append data
					existing data will be retained.
			ls -d */
				display all directories
		cd: 
		
		
		https://github.com/techarkit/shell-scripting-tutorial
		https://github.com/OneCodeMonkey/Shell
		https://github.com/NarendraPAutomationEngineer/BashShellScriptingTutorials/tree/master/practice
		https://github.com/kshitizsaini113/shell-scripting/blob/master/001_Getting_Started/007_Executing_a_Shell_Script.md
------	

	Script
		sequence of commands
		interpretted by shell and executed
		
	nano helloworld.sh
	
	#!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
https://en.wikipedia.org/wiki/Comparison_of_command_shells	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Make Shell Script Template
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://natelandau.com/boilerplate-shell-script-template/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Quotes single, double and reverse - Know difference between each
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
” “ = Double Quotes
‘ ‘ = Single Quotes
``= Reverse Quotes

Shell Scripting Tutorial Quotes Double, Single and Reverse Quote
	Double quotes
		variables and special variables will execute
	Single quote 
		Knowns as strict quotes 
		whatever you type same will be printed as it is
	Reverse quotes 
		used to executes commands

---------------------------------------------------------
#!/bin/bash
## Purpose: Examples for Quotes

## Start
VAR=123
TEST=Vilas

## Double Quote example
echo "Execute Double Quote $VAR"
echo 'Executing Single Quote $VAR $TEST'

echo "This Host Name: `hostname`"

## END
---------------------------------------------------------
sh <file name>.sh



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Script exit status
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Exit Status
Every Linux command/shell script executed by user 
	Has an exit status.
	An integer number.
	The Linux man pages explains the exit statuses of each command.
		https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html
	0:command was successful - without any errors.
	non-zero (1-255 values) : command was failure.
	Special shell variable "$?" will have previously executed exit status. 
	
	echo $?
	
Success e.g.	
	date
	echo $?
		0
Failure e.g.
	date1
	echo $?
		127

	ls /eeteec
	echo $?
		2	
		

Further very good examples
	Refer https://bash.cyberciti.biz/guide/The_exit_status_of_a_command
	
-------------------------------------------------------
#!/bin/bash
# set var 
PASSWD_FILE=/etc/passwd

# get user name
read -p "Enter a user name : " username

# try to locate username in in /etc/passwd
grep "^$username" $PASSWD_FILE > /dev/null

# store exit status of grep
# if found grep will return 0 exit stauts
# if not found, grep will return a nonzero exit stauts
status=$?

if test $status -eq 0
then
	echo "User '$username' found in $PASSWD_FILE file."
else
	echo "User '$username' not found in $PASSWD_FILE file."
fi
---------------------------------------------------------

	

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Variables and it's rules
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Legal Rules of Naming Variables in Bash
	The variable name must be in the upper case as it is considered good practice in bash scripting.
	Insert the dollar sign “$” before the variable name.
	Don’t use spaces after the initialization of the variable name and its value.
	A variable name can have letter/s.
	A variable name can have numbers, underscores, and digits.

Illegal Rules of Name Variables in Bash
	The variable name having lower case letters.
	No dollar sign “$” inserted while printing it.
	Adding spaces after the initialization of the variable name and its value.
	Start the variable name with number, digit, or special symbols.
	The variable name having space in it.
	Use of keywords to name the variables, e.g., if, else, for, while, int, float, etc.

https://www.tutorialspoint.com/unix/unix-using-variables.htm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Special Variables
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://www.tutorialspoint.com/unix/unix-special-variables.htm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Environment Variables, system variables, Local & Global variables and user defined variables
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	https://www.geeksforgeeks.org/environment-variables-in-linux-unix/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Constant and Special variables
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Constants
	https://bash.cyberciti.biz/guide/Create_the_constants_variable
	constants.sh
	
Special variables
	https://www.bogotobogo.com/Linux/linux_shell_programming_tutorial3_special_variables.php
	spacialvariables.sh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Positional Parameters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.computerhope.com/jargon/p/positional-parameter.htm#
	
	positionparam.sh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Count number command line arguments $#
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	countargs.sh
	above script.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Arithmetic Operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.javatpoint.com/bash-arithmetic-operators
	https://www.tutorialspoint.com/unix/unix-arithmetic-operators.htm

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Relational Operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.tutorialspoint.com/unix/unix-relational-operators.htm
	relationaloper.sh
	
	-eq	/ ==
		equal or not; 
		if yes, then the condition becomes true.	[ $a -eq $b ] is not true.
	-ne	/ !=
		not equal to; 
		if values are not equal, then the condition becomes true.	[ $a -ne $b ] is true.
	-gt	/ >
		greater than the value of right operand; 
		if yes, then the condition becomes true.	[ $a -gt $b ] is not true.
	-lt	/ <
		less than the value of right operand; if yes, then the condition becomes true.	[ $a 
		-lt $b ] is true.
	-ge	/ >=
		greater than or equal to the value of right operand; if yes, then the condition becomes true.	[ $a -ge $b ] is not true.
	-le	/ <=
		less than or equal to the value of right operand; if yes, then the condition becomes true.	[ $a -le $b ] is true.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o LogicalOperators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://opensource.com/article/19/10/programming-bash-logical-operators-shell-expansions
	a AND b
	-------
	T and T - T
	Anything else - F
	(both should be T)
	
	a OR b
	------
	F or F = F 
	Anything else is T
	(at least one T)
	
	NOT
	---
	
	exercises\logicaloperators\*.sh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Boolean Operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.tutorialspoint.com/unix/unix-boolean-operators.htm
	boolean.sh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Maths using expr command
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.javatpoint.com/linux-expr-command
	https://www.geeksforgeeks.org/expr-command-in-linux-with-examples/
	
	math-expr.sh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Real maths using bc command
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.shell-tips.com/linux/how-to-use-bc/
	https://www.youtube.com/watch?v=yqpY-Wk-i9k
		expr and normal calcuation cannot work with decimals.
		
		bc stand for basic calculator
		Can do 
			arithmetic operation
			increment/decrement
			assignment operator
			comparison or relational-operators
			Logical or boolean
			Math functions
			Conditional statements
			Iterative statements
	
	
	math-bc.sh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o if statement
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://acloudguru.com/blog/engineering/conditions-in-bash-scripting-if-statements
	https://www.tutorialspoint.com/unix/if-elif-statement.htm
		if-statement.sh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o if-else statement
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.tutorialspoint.com/unix/if-elif-statement.htm
	if-else-statement.sh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o if-else-if statement
		if-elif-if.sh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.tutorialspoint.com/unix/if-elif-statement.htm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Nested if statement
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://tldp.org/LDP/abs/html/nestedifthen.html
	nested-if.sh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Case statement
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.tutorialspoint.com/unix/case-esac-statement.htm
	casestatement.sh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o For Loop
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.javatpoint.com/for-loop-shell-scripting
	1forloop.sh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o While Loop
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.tutorialspoint.com/unix/unix-shell-loops.htm
		while-loop.sh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Until Loop
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.tutorialspoint.com/unix/until-loop.htm
	https://www.javatpoint.com/bash-until-loop
	untiloop.sh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Functions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.tutorialspoint.com/unix/unix-shell-functions.htm
	https://www.shellscript.sh/functions.html
	
	Shell script are executed sequentially
		Functions are not executed sequentially.
		Functions are executed when they are called.
		
	functions.sh	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Arrays
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.geeksforgeeks.org/array-basics-shell-scripting-set-1/
-------------------------------	
#!/bin/bash
index_array=(1 2 3 4 5 6 7 8 9 0)
 
for i in ${index_array[@]}
do
        echo $i
done
-------------------------------	
	https://www.journaldev.com/35945/arrays-in-shell-scripts
	array.sh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Eval command
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://unix.stackexchange.com/questions/23111/what-is-the-eval-command-in-bash
	https://linuxhint.com/bash_eval_command/
		eval.sh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Shifting parameters using shift command
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.geeksforgeeks.org/shift-command-in-linux-with-examples/
	https://unix.stackexchange.com/questions/174566/what-is-the-purpose-of-using-shift-in-shell-scripts
	
	shiftparameters.sh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o IFS - Input Field Separator
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.baeldung.com/linux/ifs-shell-variable
	https://bash.cyberciti.biz/guide/$IFS
	
	Internal Field Separator (IFS)
	
The special shell variable IFS determines 
	how Bash recognizes word boundaries while splitting a sequence of character strings. 
	Default IFS 
		three-character string comprising 
			space, 
			tab, and 
			newline:

	echo "$IFS" | cat -et
	
	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Writing CPU Usage script
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.2daygeek.com/linux-shell-script-to-monitor-cpu-utilization-usage-and-send-email/
	https://unix.stackexchange.com/questions/69167/bash-script-that-print-cpu-usage-diskusage-ram-usage
	
	systemload.sh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Writing Disk Utilization script
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.2daygeek.com/linux-shell-script-to-monitor-disk-space-usage-and-send-email/
	https://linoxide.com/check-disk-usage-is-out-of-space/
	https://gist.github.com/M1ke/5300297
	https://kedar.nitty-witty.com/blog/simple-shell-script-to-monitoring-disk-space-on-a-linux-machine
		cpumemdisk.sh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Trouble shooting debugging shell scripts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.youtube.com/watch?v=kgj-4_gmvi4
	http://learn.openwaterfoundation.org/owf-learn-linux-shell/troubleshooting/troubleshooting/
	https://www.cyberciti.biz/tips/debugging-shell-script.html
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Checking shell script errors and improvements using shellcheck.net site
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Copy paste the following script into shellcheck.net
-----------------------------------------------------
#!/bin/bash
# Simple line count example, using bash
#
# Bash tutorial: http://linuxconfig.org/Bash_scripting_Tutorial#8-2-read-file-into-bash-array
# My scripting link: http://www.macs.hw.ac.uk/~hwloidl/docs/index.html#scripting
#
# Usage: ./line_count.sh file
# -----------------------------------------------------------------------------

# Link filedescriptor 10 with stdin
exec 10<&0
# stdin replaced with a file supplied as a first argument
exec < $1
# remember the name of the input file
in=$1

# init
file="current_line.txt"
let count=0

# this while loop iterates over all lines of the file
while read LINE
do
    # increase line counter 
    ((count++))
    # write current line to a tmp file with name $file (not needed for counting)
    echo $LINE > $file
    # this checks the return code of echo (not needed for writing; just for demo)
    if [ $? -ne 0 ] 
     then echo "Error in writing to file ${file}; check its permissions!"
    fi
done

echo "Number of lines: $count"
echo "The last line of the file is: `cat ${file}`"

# Note: You can achieve the same by just using the tool wc like this
echo "Expected number of lines: `wc -l $in`"

# restore stdin from filedescriptor 10
# and close filedescriptor 10
exec 0<&10 10<&-
--------------------------------------------------------------------

Shell check can be installed locally
https://github.com/koalaman/shellcheck
	how to install

What can shellcheck find for us.
--------------------------------
ShellCheck can recognize several types of incorrect quoting:

Read above sections in https://github.com/koalaman/shellcheck


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Here Document to write paragraphs of text
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	http://www.learnlinux.org.za/courses/build/shell-scripting/ch12s05.html
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Getopts Function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://www.tutorialspoint.com/unix_commands/getopt.htm
	https://www.shellscript.sh/tips/getopts/#
		getopts.sh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Executing Multiple scripts from single script
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	https://stackoverflow.com/questions/20356583/run-multiple-shell-scripts-in-a-single-script

	if you need to run multiple script simultaneous
		then you need to background using ampersand

example global.sh
--------------------
Quote:
#!/bin/bash

specific.sh &
common.sh &
--------------------
	https://unix.stackexchange.com/questions/582092/how-can-i-run-multiple-bash-scripts-simultaneously-in-a-terminal-window
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o logger logging messages to log file 
	
	https://www.networkworld.com/article/3274570/using-logger-on-linux.html
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Curl 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		 Install curl 
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		https://www.tecmint.com/install-curl-in-linux/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		 Download files using curl 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		http://www.compciv.org/recipes/cli/downloading-with-curl/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Understanding https request and responses 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages
		https://www.tutorialspoint.com/http/http_requests.htm
		https://docs.plone.org/develop/plone/serving/http_request_and_response.html
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Various options of curl 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			https://curl.se/docs/httpscripting.html
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
	o Jq 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		 Install Jq 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		https://stedolan.github.io/jq/download/
		
		In centos
			sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
			sudo yum install jq -y
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Understanding JSON 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Parsing JSON using Jq
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
	o Assignment :
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Implement an use cases using shell script
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Examples of some shell functions
	http://www.macs.hw.ac.uk/~hwloidl/Courses/LinuxIntro/x864.html

Advanced references: 
	https://rlworkman.net/howtos/rute/node23.html
	https://tldp.org/LDP/abs/html/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Nexus – 1 Day
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	o Understanding a Package management
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o What is Nexus
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	o Repository Manager Concepts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Installating Nexus
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Introduction of User Interface Sonatype Nexus
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Configuration of Sonatype Nexus
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		o Users and Roles of Sonatype Nexus
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		o Creating Maven Hosted/Proxy/Group type repository
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		o Upload an artifact using Maven from Sonatype Nexus
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		o Download an artifacts using Maven from Sonatype Nexus
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Jira – 2 Days
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 Introduction to Jira
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	o Why Jira
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Architecture of Jira
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Installation and Configuraration of Jira
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Jira Terminologies
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Understanding Types of Jira Projects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Working with Projects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Working with Jira Issues
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Adding Project Components and Versions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Use Subtasks to Better Manage and Structure Your Issues
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Link Issues to Other Resources
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Tracking Agile project in Jira
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Working with Issues Types by Adding/Editing/Deleting
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Working with Custom Fields by Adding/Editing/Deleting
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Working with Screens by Adding/Editing/Deleting
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Searching and Filtering Issues
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Working with Workflow basic
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Introduction of Jira Plugins and Addons.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Jira Integration with Github and Jenkins
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Configuring the Default Dashboard 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	o Using Dashboard Gadgets 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	o How to setup an effective dashboard 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o What is a board 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o How to set up a Scrum board 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o How to set up a kanban board 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o User and Group Management 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Managing Users 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Managing Groups 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Configuring User Directories 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Diagrams of Possible Configurations for User Management 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o User Management Limitations and Recommendations 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Viewing User Sessions 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o User access logging 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Clearing 'Remember my login' Tokens 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Configuring Security 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Configuring Issue-level Security
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Managing Project Permissions 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Managing Project Roles
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Managing Global Permissions 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Configuring Secure Administrator Sessions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Overview of Preventing Security Attacks 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Workflows
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Configuring Workflow o Activating workflow
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Configuring Email 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Configuring Email Notifications 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Configuring JIRA's SMTP Mail Server to Send Notifications
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Terraform – 1 Day
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
● Getting started with Terraform
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Introduction to Terraform
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	What's the Scenario?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	Terraform Components
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Install Terraform
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		o Install Terraform on AWS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
	 Deploying Your First Terraform Configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		o Introduction
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		o What's the Scenario?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		o Terraform Components
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	

	 Updating Your Configuration with More Resources
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		o Introduction
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		o Terraform State and Update
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		o What's the Scenario?
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
		o Data Type and Security Groups
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Ansible – 1 day
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
● Basics of Ansible
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	 Introduction to YAML
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Managed nodes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Inventory
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Modules
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Tasks
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Playbooks
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Configurations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	

● Ansible authentication and Authorization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	 SSH with password
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 SSH with key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 sudo access
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	

● Ad-hoc commands
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	 Execute a task on
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Localhost
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Remote machine
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Multiple remote machines using
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Simple Inventory
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Group in Inventory
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	

● Ansible Inventory
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	 Inventory
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 group
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 group of groups
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 directory
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	

Playbooks
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	 Intro to Playbooks
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Writing a Play Using Modules
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Writing a Playbook
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Running a Playbook
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Sonar – 1 day
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	o What is SonarQube?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Benefits of SonarQube?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Alternative of SonarQube
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Undertanding Various License of SonarQube
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Architecture of SonarQube
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o How SonarQube works?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Components of SonarQube
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o SonarQube runtime requirements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Installing and configuring SonarQube in Linux
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Basic Workflow in SonarQube using Command line
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Working with Issues in SonarQube
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Working with Rules in SonarQube
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Working with Quality Profiles in SonarQube
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Working with Quality Gates in SonarQube
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	

Jenkins – 2.5 days
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Getting started with Jenkins
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
• Jenkins Fundamentals
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	 What is Jenkins
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Why do you need Jenkins?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 History of Jenkins
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
• Install Jenkins
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	 Install Jenkins on
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		o CentOS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
	 Understanding the jenkins installation better
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		o What are the directories created?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		o Where are they created?
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
• Basic concepts in Jenkins
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	 Understanding the Jenkins Dashboard
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		o Jobs
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		o Agents
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		o Quick Access
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		o Admin
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Jobs/Projects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		o What are Jobs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		o Types of Jobs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		o Setup a Free Style Project
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
			 Introduction to Jenkins Build Jobs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
			 Build a freestyle software project
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
			 Source code configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
			 Build Triggers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
			 Scheduling Build Jobs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
			 Adding a build step: Post-build action
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
			 Running your Build Jobs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
			 Working with Maven
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
	 Nodes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		o Adding nodes to Jenkins
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
	 Simple job
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		o Create a simple job
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		o Execute the job
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		o See the logs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		o Re-execute jobs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		o Impact of passing and failing jobs on dashboard.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
	 Jenkins Architecture
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	
	 Overview of how does it work?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o What is Jenkins Shared Library 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		 Extending with Shared Libraries 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Defining Shared Libraries  Directory structure
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Global Shared Libraries 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Folder-level Shared Libraries 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Automatic Shared Libraries 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Using libraries 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Loading libraries dynamically
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
	o MPL - Modular Pipeline Library 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		 Building the MPL with shared libraries and Jenkins pipelines 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Pipeline execution in the MPL 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Manage Nodes 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		• Master Slave Architecture 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
			 Why do you need Master Slave Architecture? 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
			 Adding Node 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
				o Different ways to add nodes 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
				o Add Node to the Jenkins Master 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~				
				o How it works? 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~				
				o Master to agent connections o Agent to master connections 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~				

				o Choosing which agent pipelines and steps run on 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			• Configuring and Managing Nodes 
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
			o Launching Agent 
			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				 Have master launch agent via ssh 
				~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				 Have master launch agent on Windows  Write your own script to launch Jenkins agents
				~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				 Launch agent via "JNLP" from agent back to master in a browser 
				~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				 Launch agent headlessly from agent back to master on command line 
			o Node labels 
			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				 Defining labels 
				~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				 Using labels 
				~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				 Example: Example production configurations 
				~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		• Distributing and Binding jobs to the Nodes 
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Plugins 
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	• Introduction to Plugins 
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	• Integrating Plugins with Jenkins 
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	• Managing and Upgrading Plugins 
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	• Commonly used Plugins 
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	• Install and use a plugin. 
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	• NB: Plugins would be used in rest of the sections also. 
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	• Managing credentials 
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		 Why do you need to manage credentials?  Different ways of managing plugins 
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		 Using credentails 
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			o Install Credentails Binding plugin 
			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			o Configure credentails 
			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			o Use it in a job
			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Docker – 2.5 Days
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	o Docker Basics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		 Virtualization and Containerization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Install docker on windows as well as VM
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Docker Architecture
		
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		 Docker Image Internals
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Docker Container Internals
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Docker Lifecycle
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Lab:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
			 Lab on Docker image
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
			 Lab on Docker Hub
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
			 Lab on Docker Container
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
			 Creating an image from our custom container
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
			 Pushing our image to Docker Hub
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
	o Build our own Docker image
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		 Discuss about each of the Dockerfile commands.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Difference between RUN, EntryPoint and Command
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Difference between Add and Copy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Lab:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Create Docker images with
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
			o FROM
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
			o RUN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
			o ENTRYPOINT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
			o CMD
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
			o ARG
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
			o Ect.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
		 Build a Docker image of an existing small application hosted on Tomcat.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
	o Nexus 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		 What is Nexus 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Using Nexus 3 as Your Repository
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
	o Volume
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		 What is Volume and why do we need them.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Different types of Docker volumes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Lab
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
	o Create a container attached to
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		 volume and understand the internals
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Bind mounts and understand the internals
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
	o Understand the various options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		 How to distinguish them
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Wich volume type to use? When to use them?.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
	o Docker Networking
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		 Understanding networking in general
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Docker networking
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Lab
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
	o Use the default bridge
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		 Understand the internals
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
	o Create a custom bridge
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		 Understand the internals
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
	o Understand the difference between default and custom bridge
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Use the host network
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		 Understand the internals
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
	o Use the none network
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		 Understand the internals
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
	o Project:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		 Build Docker front end application connected to a docker MySQL database.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		

Kubernetes – 2.5 Days 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
● Kuberenetes Introduction
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	 What is Container Orchestration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Understanding Orchestration in real world.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Why do you need Orchestration?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 What is Kubernetes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Why Kubernetes? 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Installing Kubernetes using kubeadm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Understanding Kubernetes Architecture
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	o Understanding Kubernetes Masters and its Component
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		 API Server
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 ETCD
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Scheduler
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Controller
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		

	o Understanding Kubernetes Worker Nodes and its Component
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		 Kubelet
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 kube-proxy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		 Container Runtime - docker
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
	 Understand Kubernetes Concepts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Understand Kubernetes Terminology
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Kubernetes Cluster Requirements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	 Installing Kubernetes Clusters using kubeadm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		o Installing and Configuring Kubernetes Master
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		o Installing and Configuring Kubernetes Workers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
	 Deployments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		o Create a Pod
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		o Create a ReplicaSet
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		o Create a deploment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
			 Scale out/scale in
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
			 Update rollback 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
	 Services 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		o ClusterIP 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		o NodePort 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		o Loadbalancer 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
	 Scheduled Jobs 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		o One time jobs 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		o Cronjobs 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
	 Configuring Containers 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
		o ConfigMaps 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		o Secrets
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
	 EKS and Openshift
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Final Project – 1 day
	Build a simple java project
	Create a project in jenkins
	Set up job to
		Download the code from github call a shell script
		Shell script would
			building using maven
			manage dependencies using Nexus
			Automated analysis using sonarqube according to the defined quality gates.
			Run automated dummy tests
			Create an EC2 instance using Terraform
			Apply configuration using Ansible
			Run automated (dummy) tests using maven
			Update status in Jira
			Push the image into DockerHub
			Deploy it into Kubernetes orchestrated environment.