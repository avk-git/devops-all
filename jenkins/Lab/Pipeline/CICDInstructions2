This adds integration testing to CICDInstructions.
Ideally the 2nd repo. should either do
	API testing
	Selenium testing
		Selenium based docker containers are in beta stage.
		We should launch a docker container with end point 
			http://<host ip>:8181
				host ip can be obtained by either starting the container in 
					host network
					or the host IP has to be injected as an environment variable.
			
			
			
	Alternative Jenkins suggestion: 
		https://www.jenkins.io/doc/developer/testing/


Steps to setup SonarQube
---------------------------------------------------------------------------------------------
get a t3a.xlarge machine
	2 CPU + 8 GB RAM - fyi this is hitting 200% CPU but would work.
	
Install docker 

docker run -d --name sonarqube -p 9000:9000 sonarqube:7.5-community
 docker ps
 
 Wait for the server to start and log in to SonarQube server on http://ip:9000 using default credentials: login: admin password: admin
 
 Create a token:
 
 
 Token name: sonarqube - Generate 
 
	d68cdef9681b6cdad39a249f3bbf4918795ef49f
	
Continue
	language: Java
	build: maven
	
	Following is generated and good for reference
	SonarQube code 
		mvn sonar:sonar \
  -Dsonar.host.url=http://18.223.136.35:9000 \
  -Dsonar.login=d68cdef9681b6cdad39a249f3bbf4918795ef49f
  
Further steps
	1. Setup Jenkins UI for Sonar Qube
	2. Setup webhook with Sonar Qube to call back after the test results are generated
  
Go to jenkins
	Install "sonarqube scanner plugin" in jenkins - with/without restart

	Manage Jenkins
		Configure System (first option)
			Add SonarQueb
				Name: sonarqube (Not mandatory)
				Server URL: http://18.223.136.35:9000 (trailing slash fails)
				Credential: "Secret Text" credential
					Secret: <Token created from Sonarqube>
						If this is lost - This can be generated by 
							Administration -> 

In Sonar Qube setup a webhook as below
			 
			 <your Jenkins instance>/sonarqube-webhook/
	http://18.222.66.179:8080/sonarqube-webhook/
			
Create webhook
--------------		
	SonarQube : Administration: Configuration: Webhook 
		http://<ip>:8080/sonarqube-webhook/

----------------------------------------------------------------------------------------- 
	pipeline{
		agent any
		tools {
			maven 'M3'
		}
		stages{
			
			stage('Maven Build'){
				steps{
					git url: 'https://github.com/vilasvarghese/devops'
					sh "mvn clean package"
				}
			}
			stage('Docker Build'){
				steps{
					sh "docker build . -t vilasvarghese/mywebapp:${dockerTag()}"
				}
			}
			stage('DockerHub Push Image'){
				steps{
					withCredentials([string(credentialsId: 'docker-hub', variable: 'dockerPwd')]) {
						sh "docker login -u vilasvarghese -p ${dockerPwd}"
					}
					
					sh "docker push vilasvarghese/mywebapp:${dockerTag()}"
				}
			}
			stage('Docker Deploy Dev'){
				steps{
					sh(returnStdout: true, script: '''#!/bin/bash
					if ( docker ps -a | grep 'mywebapp' )
					then
						docker stop mywebapp
						docker rm -f mywebapp
					fi'''.stripIndent())
					sh "docker rmi vilasvarghese/mywebapp:${dockerTag()}"
					sh "docker run -d -p 8181:8080 --name mywebapp vilasvarghese/mywebapp:${dockerTag()}"
				}
			}
			stage('SonarQube analysis') {
				steps {
					withSonarQubeEnv('sonarqube') {
						sh 'mvn sonar:sonar'
					}
				}
			}
			stage("Quality Gate") {
				steps {
					timeout(time: 1, unit: 'HOURS') {
						// Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
						// true = set pipeline to UNSTABLE, false = don't
						waitForQualityGate abortPipeline: true
					}
				}
			}
			stage('Integration Test'){
				steps{
					git url: 'https://github.com/jenkinsci/archetypes'
					 timeout(time: 1, unit: 'HOURS') {
						sh '''
							docker version
							#docker system prune --all --force
							DOCKER_BUILDKIT=1 docker build --progress plain --no-cache .
						'''
					}         
				}
			}
		}
	}

	def dockerTag(){
		def commitId = sh returnStdout: true, script: 'git rev-parse --short HEAD'
		return commitId
	}
-----------------------------------------------------------------------------------------